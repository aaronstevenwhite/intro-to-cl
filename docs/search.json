[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "This site contains materials for Introduction to Computational Linguistics–a course given by Aaron Steven White at the University of Rochester."
  },
  {
    "objectID": "index.html#about-the-course",
    "href": "index.html#about-the-course",
    "title": "About",
    "section": "About the course",
    "text": "About the course\nThis course covers foundational concepts in computational linguistics. Major focus is placed on the use of formal languages as a tool for understanding natural language as well as on developing students’ ability to implement foundational algorithms pertaining to those formal languages. Topics include basic formal language theory, finite state phonological and morphological parsing, and syntactic parsing for context free grammars and mildly context sensitive formalisms."
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "About",
    "section": "Prerequisites",
    "text": "Prerequisites\nThis course relies on concepts covered in an introductory linguistics course and an introductory programming course. With respect to the latter, it specifically assumes that you can competently write scripts that do non-trivial things and can work competently with Python’s object-oriented programming facilities but maybe not develop a package on your own."
  },
  {
    "objectID": "index.html#about-the-instructor",
    "href": "index.html#about-the-instructor",
    "title": "About",
    "section": "About the instructor",
    "text": "About the instructor\nAaron Steven White is an Associate Professor of Linguistics and Computer Science at the University of Rochester, where he directs the Formal and Computational Semantics lab (FACTS.lab). His research investigates the relationship between linguistic expressions and conceptual categories that undergird the human ability to convey information about possible past, present, and future configurations of things in the world.\nIn addition to being a principal investigator on numerous federally funded grants and contracts, White is the recipient of a National Science Foundation Faculty Early Career Development (CAREER) award. His work has appeared in a variety linguistics, cognitive science, and natural language processing venues, including Semantics & Pragmatics, Glossa, Language Acquisition, Cognitive Science, Cognitive Psychology, Transactions of the Association for Computational Linguistics, and Empirical Methods in Natural Language Processing."
  },
  {
    "objectID": "index.html#about-the-site",
    "href": "index.html#about-the-site",
    "title": "About",
    "section": "About the site",
    "text": "About the site\nThe site itself is built using Quarto. The source files for this site are available on github at aaronstevenwhite/intro-to-cl. See Installation for information on how to run the code documented here."
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "About",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nThe development of these materials was supported by the University of Rochester and a National Science Foundation grant: CAREER: Logical Form Induction (BCS/IIS-2237175)."
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "About",
    "section": "License ",
    "text": "License \nIntroduction to Computational Linguistics by Aaron Steven White is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. Based on a work at https://github.com/aaronstevenwhite/intro-to-cl."
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Installation",
    "section": "",
    "text": "The site itself is built using Quarto. The source files for this site are available on github at aaronstevenwhite/intro-to-cl. You can obtain the files by cloning this repo.\nAll further code on this page assumes that you are inside of this cloned repo."
  },
  {
    "objectID": "installation.html#installing-quarto-and-extensions",
    "href": "installation.html#installing-quarto-and-extensions",
    "title": "Installation",
    "section": "Installing Quarto and extensions",
    "text": "Installing Quarto and extensions\nTo build this site, you will need to install Quarto as well as its include-code-files and line-highlight extensions.\nquarto add quarto-ext/include-code-files\nquarto add shafayetShafee/line-highlight\nThese extensions are mainly used for including and highlighting parts of external files."
  },
  {
    "objectID": "installation.html#building-the-docker-container",
    "href": "installation.html#building-the-docker-container",
    "title": "Installation",
    "section": "Building the Docker container",
    "text": "Building the Docker container\nAll pages that have executed code blocks are generated from jupyter notebooks, which were run within a Docker container constructed using the Dockerfile contained in this repo.\nFROM jupyter/minimal-notebook:x86_64-python-3.11.6\n\n\n\nRUN conda install -c conda-forge pynini\nAssuming you have Docker installed, the image can be built using:\ndocker build --platform linux/amd64 -t intro-to-cl .\nA container based on this image can then be constructed using:\ndocker run -it --rm -p 8888:8888 -v \"${PWD}\":/home/jovyan/work intro-to-cl\nTo access jupyter, simply copy the link provided when running this command. It should look something like this (though your access tokens will differ):\nTo access the server, open this file in a browser:\n    file:///home/jovyan/.local/share/jupyter/runtime/jpserver-8-open.html\nOr copy and paste one of these URLs:\n    http://4738b6192fb0:8888/lab?token=8fc165776e7e99c98ec19883f750071a187e85a0a9253b81\n    http://127.0.0.1:8888/lab?token=8fc165776e7e99c98ec19883f750071a187e85a0a9253b81\nYou can change the port that docker forwards to by changing the first 8888 in the -p 8888:8888 option–e.g. to redirect port 10000 -p 10000:8888. Just remember to correspondingly change the port you attempt to access in your browser: so even though the message above has you accessing port 8888, that’s the docker container’s port 8888, which forwards to your machine’s 10000."
  },
  {
    "objectID": "formal-and-practical-preliminaries/index.html",
    "href": "formal-and-practical-preliminaries/index.html",
    "title": "Overview",
    "section": "",
    "text": "In this first module of the course, we are going to focus on developing a set of formal and practical tools that we will use through the rest of the course."
  },
  {
    "objectID": "formal-and-practical-preliminaries/elementary-mathematical-concepts/index.html",
    "href": "formal-and-practical-preliminaries/elementary-mathematical-concepts/index.html",
    "title": "Overview",
    "section": "",
    "text": "Before getting to the fun parts of this course, we need to develop some basic formal tools. In this submodule, we’ll focus on some core concepts in naïve set theory and objects—such as relations and functions—constructed with these concepts. We’ll then use these concepts to develop a formal concept of strings on an alphabet and the set of all languages constructed from those strings.\nAs we develop these formal tools, we will also see how they are implemented in Python. I’m going to assume that you have some basic Python under your belt: that you can competently write scripts that do non-trivial things and can work competently with Python’s object-oriented programming facilities but maybe not develop a package on your own."
  },
  {
    "objectID": "formal-and-practical-preliminaries/elementary-mathematical-concepts/sets.html",
    "href": "formal-and-practical-preliminaries/elementary-mathematical-concepts/sets.html",
    "title": "Sets",
    "section": "",
    "text": "Sets are unordered, uniqued collections of things. One way to represent sets is by placing (representations of) their elements between curly braces.\nFor instance, we can represent the set of vowel phonemes in English in the following way.\n\\[V_1 \\equiv \\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\}\\]\nWe express that something is an element of a set using the notation \\(\\cdot \\in \\cdot\\) and that it is not an element using the notation \\(\\cdot \\not\\in \\cdot\\). So for instance, \\(\\text{e}\\) is an element of \\(V_1\\), while \\(\\text{t}\\) is not.\n\\[\\text{e} \\in V_1 \\quad \\text{t} \\not\\in V_1\\]\nTo work with sets in Python, we can use the standard library’s set type. These objects function as we would expect in terms of elementhood.\n\nvowels_1: set[str] = {\"e\", \"i\", \"o\", \"u\", \"æ\", \"ɑ\", \"ɔ\", \"ə\", \"ɛ\", \"ɪ\", \"ʊ\"}\n\nif \"e\" in vowels_1:\n    print(\"e ∈ V_1\")\nelse:\n    print(\"e ∉ V_1\")\n    \nif \"t\" in vowels_1:\n    print(\"t ∈ V_3\")\nelse:\n    print(\"t ∉ V_3\")\n\ne ∈ V_1\nt ∉ V_3\n\n\nSets can be represented in many ways. For instance, we could also represent the set \\(V_1\\) in this way:\n\\[V_2 \\equiv \\{\\text{o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ, e, i}\\}\\]\nBecause sets are unordered, both \\(V_1\\) and \\(V_2\\) are representations of the exact same set (\\(V_1 = V_2\\)). And because sets are uniqued, \\(V_3\\) is also a representation of the same set as \\(V_1\\) and \\(V_2\\)–i.e. \\(V_1=V_2=V_3\\)–even though there are multiple copies of some vowels in this representation.\n\\[V_3 \\equiv \\{\\text{o, o, o, u, u, æ, ɑ, ɔ, ə, ə, ə, ɛ, ɪ, ʊ, e, i}\\}\\]\nPython sets work as we would expect in terms of equality.\n\nvowels_2: set[str] = {\"o\", \"u\", \"æ\", \"ɑ\", \"ɔ\", \"ə\", \"ɛ\", \"ɪ\", \"ʊ\", \"e\", \"i\"}\nvowels_3: set[str] = {\"o\", \"o\", \"o\", \"u\", \"u\", \"æ\", \"ɑ\", \"ɔ\", \"ə\", \"ə\", \"ə\", \"ɛ\", \"ɪ\", \"ʊ\", \"e\", \"i\"}\n\nif vowels_1 == vowels_2:\n    print(\"V_1 = V_2\")\nelse:\n    print(\"V_1 ≠ V_2\")\n    \nif vowels_1 == vowels_3:\n    print(\"V_1 = V_3\")\nelse:\n    print(\"V_1 ≠ V_3\")\n\nV_1 = V_2\nV_1 = V_3\n\n\nI’ll just call this set \\(V \\equiv V_1 = V_2 = V_3\\) moving forward.\n\nvowels: set[str] = vowels_1\n\nPython has another way of representing sets that we will have reason to use: frozenset. These work very similarly to sets in a lot of ways.\n\nvowels_frozen: frozenset[str] = frozenset(vowels)\n\nif vowels == vowels_frozen:\n    print(\"V = V_frozen\")\nelse:\n    print(\"V ≠ V_frozen\")\n\nV = V_frozen\n\n\nOne big difference between the two is that sets are mutable, while frozensets are immutable. Basically, we can alter sets, but we can’t alter frozensets. For instance, we can add elements to a set but not a frozenset.\n\ntry:\n    vowels.add(\"t\")\n    print(\"Successfully added 't' to vowels.\")\nexcept AttributeError:\n    print(\"Failed to add 't' to vowels.\")\n\ntry:\n    vowels_frozen.add(\"t\")\n    print(\"Successfully added 't' to vowels_frozen.\")\nexcept AttributeError:\n    print(\"Failed to add 't' to vowels_frozen.\")\n\nSuccessfully added 't' to vowels.\nFailed to add 't' to vowels_frozen.\n\n\nSimilarly, we can remove elements from sets but not frozensets.\n\ntry:\n    vowels.remove(\"t\")\n    print(\"Successfully removed 't' to vowels.\")\nexcept AttributeError:\n    print(\"Failed to remove 't' to vowels.\")\n\ntry:\n    vowels_frozen.remove(\"ə\")\n    print(\"Successfully removed 'ə' to vowels_frozen.\")\nexcept AttributeError:\n    print(\"Failed to remove 'ə' to vowels_frozen.\")\n\nSuccessfully removed 't' to vowels.\nFailed to remove 'ə' to vowels_frozen.\n\n\nThis behavior makes frozensets seem pretty useless, since it would seem they can do fewer things with them. But frozensets turn out to have a really useful property: they can be elements of other sets or frozensets.\n\ntry:\n    vowels_singleton: set[set[str]] = {vowels}\n    print(\"Successfully constructed the set {V}.\")\nexcept TypeError:\n    print(\"Failed to construct the set {V}.\")\n\ntry:\n    vowels_frozen_singleton: set[frozenset[str]] = {vowels_frozen}\n    print(\"Successfully constructed the set {V_frozen}.\")\nexcept TypeError:\n    print(\"Failed to construct the set {V_frozen}.\")\n\nFailed to construct the set {V}.\nSuccessfully constructed the set {V_frozen}.\n\n\nThe reason frozensets can be elements of sets or frozensets is that they are hashable, while sets are not.[^There is a correlation between hashability and immutability, but they are not the same thing.] We are going to use this property extensively throughout this course."
  },
  {
    "objectID": "formal-and-practical-preliminaries/elementary-mathematical-concepts/multisets.html",
    "href": "formal-and-practical-preliminaries/elementary-mathematical-concepts/multisets.html",
    "title": "Multisets",
    "section": "",
    "text": "Multisets (or bags) are unordered, nonuniqued collections. In this course, we won’t spend too much time with these sorts of objects, but it’s useful to know the terminology.\nMultisets are often (somewhat confusingly) represented using the same notation as sets. For instance, the following is a multiset containing only vowels.\n\\[\\bar{V}_1 \\equiv \\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\}\\]\nAnd this is a representation of the same multiset, since multisets are unordered.\n\\[\\bar{V}_2 \\equiv \\{\\text{o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ, e, i}\\}\\]\nBut this is not a representation of a multiset, since multisets are nonuniqued.\n\\[\\bar{V}_3 \\equiv \\{\\text{o, o, o, u, u, æ, ɑ, ɔ, ə, ə, ə, ɛ, ɪ, ʊ, e, i}\\}\\]\nAnother way of saying this is that the multiplicity of a particular element matters in a multiset in a way it doesn’t matter in a set.\nWe often work with multisets in Python using dicts or specialized subclasses thereof. One special subclass of dict that is useful for representing multisets (and that you should know) is collections.Counter.\nThe nice thing about Counter is that it can be initialized with an iterable or mapping (such as a set) containing hashable objects (such as strs) and it will make a dictionary mapping the elements of that iterable/mapping to their multiplicity–i.e. how many times they show up in that iterable/mapping.[^Note that I’m passing the vowels in the multiset as a list to Counter. We crucially don’t want to pass them as a set, because that would destroy the multiplicities of the items.]\n\nfrom pprint import pprint\nfrom collections import Counter\n\nvowels_bar_1: Counter[str] = Counter(\n    [\"e\", \"i\", \"o\", \"u\", \"æ\", \"ɑ\", \"ɔ\", \"ə\", \"ɛ\", \"ɪ\", \"ʊ\"]\n)\n\npprint(vowels_bar_1)\n\nCounter({'e': 1,\n         'i': 1,\n         'o': 1,\n         'u': 1,\n         'æ': 1,\n         'ɑ': 1,\n         'ɔ': 1,\n         'ə': 1,\n         'ɛ': 1,\n         'ɪ': 1,\n         'ʊ': 1})\n\n\n\nvowels_bar_2: Counter[str] = Counter(\n    [\"o\", \"u\", \"æ\", \"ɑ\", \"ɔ\", \"ə\", \"ɛ\", \"ɪ\", \"ʊ\", \"e\", \"i\"]\n)\n\npprint(vowels_bar_2)\n\nCounter({'o': 1,\n         'u': 1,\n         'æ': 1,\n         'ɑ': 1,\n         'ɔ': 1,\n         'ə': 1,\n         'ɛ': 1,\n         'ɪ': 1,\n         'ʊ': 1,\n         'e': 1,\n         'i': 1})\n\n\n\nvowels_bar_3: Counter[str] = Counter(\n    [\"o\", \"o\", \"o\", \"u\", \"u\", \"æ\", \"ɑ\", \"ɔ\", \"ə\", \"ə\", \"ə\", \"ɛ\", \"ɪ\", \"ʊ\", \"e\", \"i\"]\n)\n\npprint(vowels_bar_3)\n\nCounter({'o': 3,\n         'ə': 3,\n         'u': 2,\n         'æ': 1,\n         'ɑ': 1,\n         'ɔ': 1,\n         'ɛ': 1,\n         'ɪ': 1,\n         'ʊ': 1,\n         'e': 1,\n         'i': 1})\n\n\nAnd Counters behave as we would expect of a multiset–at least in terms of equality.\n\nif vowels_bar_1 == vowels_bar_2:\n    print(\"Vbar_1 = Vbar_2\")\nelse:\n    print(\"Vbar_1 ≠ Vbar_2\")\n    \nif vowels_bar_1 == vowels_bar_3:\n    print(\"Vbar_1 = Vbar_3\")\nelse:\n    print(\"Vbar_1 ≠ Vbar_3\")\n\nVbar_1 = Vbar_2\nVbar_1 ≠ Vbar_3"
  },
  {
    "objectID": "formal-and-practical-preliminaries/elementary-mathematical-concepts/cardinality.html",
    "href": "formal-and-practical-preliminaries/elementary-mathematical-concepts/cardinality.html",
    "title": "Cardinality",
    "section": "",
    "text": "The number of things in a set is its cardinality.\n\\[|V| = |\\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\}| = 11\\]\nIn Python, we compute the cardinality using len.\n\nvowels: set[str] = {\"e\", \"i\", \"o\", \"u\", \"æ\", \"ɑ\", \"ɔ\", \"ə\", \"ɛ\", \"ɪ\", \"ʊ\"}\n\nprint(f\"|V| = {len(vowels)}\")\n\n|V| = 11\n\n\nSets can have infinite cardinality. For instance, the set of natural numbers is infinite.\n\\[\\mathbb{N} = \\{0, 1, 2, 3, \\ldots\\}\\text{ (or }\\{1, 2, 3, \\ldots\\})\\]\nWe unfortunately can’t use set to work with infinite sets in Python. Instead, we have to use generators. One way to initialize a generator is to define a function containing a yield statement.\n\nfrom collections.abc import Generator\n\ndef natural_numbers() -&gt; int:\n    \"\"\"Initialize a generator for the natural numbers\"\"\"\n    i = 0\n    while True:\n        yield i\n        i += 1\n\n# initialize a generator of the natural numbers\nN: Generator[int] = natural_numbers()\n\n# print the first 10 natural numbers\nfor i in N:\n  if i &lt; 10:\n    print(i)\n  else:\n    break\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9"
  },
  {
    "objectID": "formal-and-practical-preliminaries/elementary-mathematical-concepts/set-relations.html",
    "href": "formal-and-practical-preliminaries/elementary-mathematical-concepts/set-relations.html",
    "title": "Set relations",
    "section": "",
    "text": "Subcollections of elements of a set are subsets (of that set)\n\\[\\{\\text{i, u, ɪ, ʊ}\\} \\subseteq \\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\}\\]\n\nvowels: set[str] = {\"e\", \"i\", \"o\", \"u\", \"æ\", \"ɑ\", \"ɔ\", \"ə\", \"ɛ\", \"ɪ\", \"ʊ\"}\nhigh_vowels: set[str] = {'u', 'ʊ', 'i', 'ɪ'}\n\nif high_vowels &lt;= vowels:\n    print(f\"{high_vowels} ⊆ {vowels}\")\nelse:\n    print(f\"{high_vowels} ⊄ {vowels} ∨ {high_vowels} ≠ {vowels}\")\n\n{'u', 'i', 'ɪ', 'ʊ'} ⊆ {'i', 'ɛ', 'æ', 'ɪ', 'ə', 'ʊ', 'u', 'ɑ', 'ɔ', 'o', 'e'}\n\n\nA set is an improper subset of itself\n\\[\\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\} \\subseteq \\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\}\\]\n\nif vowels &lt;= vowels:\n    print(f\"{vowels} ⊆ {vowels}\")\nelse:\n    print(f\"{vowels} ⊄ {vowels} ∨ {vowels} ≠ {vowels}\")\n\n{'i', 'ɛ', 'æ', 'ɪ', 'ə', 'ʊ', 'u', 'ɑ', 'ɔ', 'o', 'e'} ⊆ {'i', 'ɛ', 'æ', 'ɪ', 'ə', 'ʊ', 'u', 'ɑ', 'ɔ', 'o', 'e'}\n\n\nAll other sets of a subset are proper subsets.\n\\[\\{\\text{i}\\} \\subset \\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\}\\]\n\nif {'i'} &lt; vowels:\n    print(f\"{{'i'}} ⊂ {vowels}\")\nelse:\n    print(f\"{{'i'}} ⊄ {vowels}\")\n\nif vowels &lt; vowels:\n    print(f\"{vowels} ⊂ {vowels}\")\nelse:\n    print(f\"{vowels} ⊄ {vowels}\")\n\n{'i'} ⊂ {'i', 'ɛ', 'æ', 'ɪ', 'ə', 'ʊ', 'u', 'ɑ', 'ɔ', 'o', 'e'}\n{'i', 'ɛ', 'æ', 'ɪ', 'ə', 'ʊ', 'u', 'ɑ', 'ɔ', 'o', 'e'} ⊄ {'i', 'ɛ', 'æ', 'ɪ', 'ə', 'ʊ', 'u', 'ɑ', 'ɔ', 'o', 'e'}\n\n\n\n\nThe dual of subset is superset.\n\\[\\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\} \\supseteq \\{\\text{i}\\}\\] \\[\\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\} \\supseteq \\{\\text{i, u, ɪ, ʊ}\\}\\]\nA set is an improper superset of itself\n\\[\\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\} \\supseteq \\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\}\\]\nAll other supersets of a set are proper supersets.\n\\[\\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\} \\supset \\{\\text{i}\\}\\]"
  },
  {
    "objectID": "formal-and-practical-preliminaries/elementary-mathematical-concepts/set-relations.html#subsets",
    "href": "formal-and-practical-preliminaries/elementary-mathematical-concepts/set-relations.html#subsets",
    "title": "Set relations",
    "section": "",
    "text": "Subcollections of elements of a set are subsets (of that set)\n\\[\\{\\text{i, u, ɪ, ʊ}\\} \\subseteq \\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\}\\]\n\nvowels: set[str] = {\"e\", \"i\", \"o\", \"u\", \"æ\", \"ɑ\", \"ɔ\", \"ə\", \"ɛ\", \"ɪ\", \"ʊ\"}\nhigh_vowels: set[str] = {'u', 'ʊ', 'i', 'ɪ'}\n\nif high_vowels &lt;= vowels:\n    print(f\"{high_vowels} ⊆ {vowels}\")\nelse:\n    print(f\"{high_vowels} ⊄ {vowels} ∨ {high_vowels} ≠ {vowels}\")\n\n{'u', 'i', 'ɪ', 'ʊ'} ⊆ {'i', 'ɛ', 'æ', 'ɪ', 'ə', 'ʊ', 'u', 'ɑ', 'ɔ', 'o', 'e'}\n\n\nA set is an improper subset of itself\n\\[\\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\} \\subseteq \\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\}\\]\n\nif vowels &lt;= vowels:\n    print(f\"{vowels} ⊆ {vowels}\")\nelse:\n    print(f\"{vowels} ⊄ {vowels} ∨ {vowels} ≠ {vowels}\")\n\n{'i', 'ɛ', 'æ', 'ɪ', 'ə', 'ʊ', 'u', 'ɑ', 'ɔ', 'o', 'e'} ⊆ {'i', 'ɛ', 'æ', 'ɪ', 'ə', 'ʊ', 'u', 'ɑ', 'ɔ', 'o', 'e'}\n\n\nAll other sets of a subset are proper subsets.\n\\[\\{\\text{i}\\} \\subset \\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\}\\]\n\nif {'i'} &lt; vowels:\n    print(f\"{{'i'}} ⊂ {vowels}\")\nelse:\n    print(f\"{{'i'}} ⊄ {vowels}\")\n\nif vowels &lt; vowels:\n    print(f\"{vowels} ⊂ {vowels}\")\nelse:\n    print(f\"{vowels} ⊄ {vowels}\")\n\n{'i'} ⊂ {'i', 'ɛ', 'æ', 'ɪ', 'ə', 'ʊ', 'u', 'ɑ', 'ɔ', 'o', 'e'}\n{'i', 'ɛ', 'æ', 'ɪ', 'ə', 'ʊ', 'u', 'ɑ', 'ɔ', 'o', 'e'} ⊄ {'i', 'ɛ', 'æ', 'ɪ', 'ə', 'ʊ', 'u', 'ɑ', 'ɔ', 'o', 'e'}\n\n\n\n\nThe dual of subset is superset.\n\\[\\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\} \\supseteq \\{\\text{i}\\}\\] \\[\\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\} \\supseteq \\{\\text{i, u, ɪ, ʊ}\\}\\]\nA set is an improper superset of itself\n\\[\\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\} \\supseteq \\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\}\\]\nAll other supersets of a set are proper supersets.\n\\[\\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\} \\supset \\{\\text{i}\\}\\]"
  },
  {
    "objectID": "formal-and-practical-preliminaries/elementary-mathematical-concepts/set-relations.html#empty-set",
    "href": "formal-and-practical-preliminaries/elementary-mathematical-concepts/set-relations.html#empty-set",
    "title": "Set relations",
    "section": "Empty set",
    "text": "Empty set\nThe empty set \\(\\emptyset\\) is a set containing no elements.\n\\[\\emptyset \\equiv \\{\\}\\]\n\nemptyset: set = set()\n\nThe empty set is a subset of all sets.\n\\[\\emptyset \\subset \\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\}\\]\n\n\nif emptyset &lt; vowels:\n    print(f\"∅ ⊂ {vowels}\")\nelse:\n    print(f\"∅ ⊄ {vowels}\")\n\n∅ ⊂ {'i', 'ɛ', 'æ', 'ɪ', 'ə', 'ʊ', 'u', 'ɑ', 'ɔ', 'o', 'e'}\n\n\nThe empty set is not in all sets, though it is in some sets\n\\[\\emptyset \\not\\in \\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\}\\] \\[\\emptyset \\in \\{\\emptyset, \\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\}\\]\n\nvowels_with_empty: set[str] = set(vowels)\nvowels_with_empty.add(frozenset(emptyset))\n\nif emptyset in vowels:\n    print(f\"∅ ∈ {vowels}\")\nelse:\n    print(f\"∅ ∉ {vowels}\")\n    \nif emptyset in vowels_with_empty:\n    print(f\"∅ ∈ {vowels_with_empty}\")\nelse:\n    print(f\"∅ ∉ {vowels_with_empty}\")\n\n∅ ∉ {'i', 'ɛ', 'æ', 'ɪ', 'ə', 'ʊ', 'u', 'ɑ', 'ɔ', 'o', 'e'}\n∅ ∈ {'i', 'ɛ', 'æ', 'ɪ', 'ə', 'ʊ', 'u', frozenset(), 'ɑ', 'ɔ', 'o', 'e'}"
  },
  {
    "objectID": "formal-and-practical-preliminaries/elementary-mathematical-concepts/set-relations.html#intersection",
    "href": "formal-and-practical-preliminaries/elementary-mathematical-concepts/set-relations.html#intersection",
    "title": "Set relations",
    "section": "Intersection",
    "text": "Intersection\nThe intersection of two sets is the set of their shared elements. For instance, if we take the intersection of the set of high vowels with the set of back vowels, we get the high back vowels.\n\\[\\{\\text{i, u, ɪ, ʊ}\\} \\cap \\{\\text{u, ʊ, o, ɔ, ɑ}\\} = \\{\\text{u, ʊ}\\}\\]\n\nback_vowels: set[str] = {'u', 'ʊ', 'ɑ', 'ɔ', 'o'}\n\nprint(f\"{high_vowels} ∩ {back_vowels} = {high_vowels & back_vowels}\")\n\n{'u', 'i', 'ɪ', 'ʊ'} ∩ {'u', 'ɑ', 'ɔ', 'o', 'ʊ'} = {'u', 'ʊ'}\n\n\nThe intersection of a set with a subset of that set is that subset.\n\\[\\{\\text{i, u, ɪ, ʊ}\\} \\cap \\{\\text{u, ʊ}\\} = \\{\\text{u, ʊ}\\}\\] \\[\\{\\text{i, u, ɪ, ʊ}\\} \\cap \\emptyset = \\emptyset\\]\n\nhigh_back_vowels: set[str] = {'u', 'ʊ'}\n\nprint(f\"{high_vowels} ∩ {high_back_vowels} = {high_vowels & high_back_vowels}\") \n\n{'u', 'i', 'ɪ', 'ʊ'} ∩ {'u', 'ʊ'} = {'u', 'ʊ'}\n\n\nIntersection can yield the empty set.\n\\[\\{\\text{i, u, ɪ, ʊ}\\} \\cap \\{\\text{o, ɔ}\\} = \\emptyset\\]\n\nmid_back_vowels: set[str] = {'o', 'ɔ'}\n\nprint(f\"{high_vowels} ∩ {mid_back_vowels} = {high_vowels & mid_back_vowels}\") \n\n{'u', 'i', 'ɪ', 'ʊ'} ∩ {'ɔ', 'o'} = set()"
  },
  {
    "objectID": "formal-and-practical-preliminaries/elementary-mathematical-concepts/set-relations.html#union",
    "href": "formal-and-practical-preliminaries/elementary-mathematical-concepts/set-relations.html#union",
    "title": "Set relations",
    "section": "Union",
    "text": "Union\nThe union of two sets is the set of elements in both. For instance, if we take the union of the set of high vowels with the set of back vowels, we get the set of high and/or back vowels.\n\\[\\{\\text{i, u, ɪ, ʊ}\\} \\cup \\{\\text{u, ʊ, o, ɔ, ɑ}\\} = \\{\\text{i, ɪ, u, ʊ, o, ɔ, ɑ}\\}\\]\n\nprint(f\"{high_vowels} ∪ {back_vowels} = {high_vowels | back_vowels}\")\n\n{'u', 'i', 'ɪ', 'ʊ'} ∪ {'u', 'ɑ', 'ɔ', 'o', 'ʊ'} = {'i', 'ɪ', 'ʊ', 'u', 'ɑ', 'ɔ', 'o'}\n\n\nThe union of a set with itself or one of its subsets (including the empty set) is that set.\n\\[\\{\\text{i, u, ɪ, ʊ}\\} \\cup \\{\\text{i, u, ɪ, ʊ}\\} = \\{\\text{i, u, ɪ, ʊ}\\}\\] \\[\\{\\text{i, u, ɪ, ʊ}\\} \\cup \\{\\text{u, ʊ}\\} = \\{\\text{i, u, ɪ, ʊ}\\}\\]\n\nprint(f\"{high_vowels} ∪ {high_back_vowels} = {high_vowels | high_back_vowels}\")\n\n{'u', 'i', 'ɪ', 'ʊ'} ∪ {'u', 'ʊ'} = {'u', 'i', 'ɪ', 'ʊ'}\n\n\nThe + operator does not work for sets like it does for lists! You need to use | or union() explicitly.\n\ntry:\n    high_vowels + high_back_vowels\nexcept TypeError:\n    print(\"+ for sets does not implement union!\")\n\n+ for sets does not implement union!"
  },
  {
    "objectID": "formal-and-practical-preliminaries/elementary-mathematical-concepts/set-relations.html#set-builder-notation",
    "href": "formal-and-practical-preliminaries/elementary-mathematical-concepts/set-relations.html#set-builder-notation",
    "title": "Set relations",
    "section": "Set builder notation",
    "text": "Set builder notation\nIt is commonly the case that we want to filter a larger set–e.g. the vowels–down to a set containing only elements of that set with particular properties. For instance, suppose we want the high front vowels and we know how to check whether a vowel is high and whether it is front. We could describe the high front vowels using set-builder notation.\n\\[\\{x \\in \\text{vowels} \\mid x \\text{ is high and } x \\text{ is front}\\}\\]\nSet-builder notation can be implemented using set comprehensions.\n\nvowels: set[str] = {\"e\", \"i\", \"o\", \"u\", \"æ\", \"ɑ\", \"ɔ\", \"ə\", \"ɛ\", \"ɪ\", \"ʊ\"}\n\ndef is_high(x: str) -&gt; bool:\n  return x in {\"i\", \"u\", \"ɪ\", \"ʊ\"}\n\ndef is_front(x: str) -&gt; bool:\n  return x in {\"i\", \"ɪ\", \"e\", \"æ\", \"ɛ\"}\n\n{v for v in vowels if is_high(v) and is_front(v)}\n\n{'i', 'ɪ'}\n\n\nNote that:\n\\[\\{x \\in \\text{vowels} \\mid x \\text{ is high and } x \\text{ is front}\\} = \\{x \\in \\text{vowels} \\mid x \\text{ is high}\\} \\cap \\{x \\in \\text{vowels} \\mid x \\text{ is front}\\}\\]\n\n{v for v in vowels if is_high(v)} & {v for v in vowels if is_front(v)}\n\n{'i', 'ɪ'}\n\n\nThis fact will be important for your first homework."
  },
  {
    "objectID": "formal-and-practical-preliminaries/elementary-mathematical-concepts/set-relations.html#complement",
    "href": "formal-and-practical-preliminaries/elementary-mathematical-concepts/set-relations.html#complement",
    "title": "Set relations",
    "section": "Complement",
    "text": "Complement\nThe (absolute) complement of a set \\(A\\) relative to a universe \\(U\\) (a possibly improper superset of \\(A\\)) is all elements in \\(U\\) that are not in \\(A\\).\n\\[A^\\complement = \\overline{A} = A' = \\{x\\;|\\;x \\in U \\land x \\not\\in A\\}\\]\nFor instance, if \\(U \\equiv \\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ}\\}\\), then the complement of the high vowels is the non-high vowels.\n\\[\\{\\text{i, u, ɪ, ʊ}\\}^\\complement = \\{\\text{e, o, æ, ɑ, ɔ, ə, ɛ}\\}\\]\nNote that \\(U = A \\cup \\overline{A}\\)."
  },
  {
    "objectID": "formal-and-practical-preliminaries/elementary-mathematical-concepts/set-relations.html#set-difference",
    "href": "formal-and-practical-preliminaries/elementary-mathematical-concepts/set-relations.html#set-difference",
    "title": "Set relations",
    "section": "Set difference",
    "text": "Set difference\nThe set difference (or relative complement) of a set \\(A\\) relative to another set \\(B\\) is all elements in \\(B\\) that are not in \\(A\\)\n\\[B - A = \\{x\\;|\\;x \\in B \\land x \\not\\in A\\}\\]\nFor instance, the difference of the set of high vowels relative to the set of high back vowels, is the high non-back vowels.\n\\[\\{\\text{i, u, ɪ, ʊ}\\} - \\{\\text{u, ʊ}\\} = \\{\\text{i, ɪ}\\}\\]\n\nprint(f\"{high_vowels} - {high_back_vowels} = {high_vowels - high_back_vowels}\")\n\n{'u', 'i', 'ɪ', 'ʊ'} - {'u', 'ʊ'} = {'i', 'ɪ'}"
  },
  {
    "objectID": "formal-and-practical-preliminaries/elementary-mathematical-concepts/power-sets.html",
    "href": "formal-and-practical-preliminaries/elementary-mathematical-concepts/power-sets.html",
    "title": "Power Sets",
    "section": "",
    "text": "The set of all subsets of a set is its power set.\n\\[\\mathcal{P}(A) = 2^A = \\{X \\mid X \\subseteq A\\}\\]\nFor example, for the set \\(\\{\\text{i}, \\text{u}, \\text{ə}\\}\\), we have:\n\\[\\mathcal{P}(\\{\\text{i},\\text{u},\\text{ə}\\}) = 2^{\\{\\text{i},\\text{u},\\text{ə}\\}} = \\{\\emptyset, \\{\\text{i}\\}, \\{\\text{u}\\}, \\{\\text{ə}\\}, \\{\\text{i}, \\text{u}\\}, \\{\\text{u},\\text{ə}\\}, \\{\\text{i},\\text{ə}\\}, \\{\\text{i}, \\text{u}, \\text{ə}\\}\\}\\]\nTo obtain the power set of some set, we can loop through all possible subset cardinalities, and use the itertools.combinations function to obtain all subsets of our set of interest (the high vowels) of a particular cardinality. To do this, we need a second loop over the output of itertools.combinations at each cardinality is necessary to flatten the sets.\n\nfrom itertools import combinations\n\nhigh_vowels: set[str] = {'u', 'ʊ', 'i', 'ɪ'}\n\npowerset_of_high_vowels = {subset \n                           for cardinality in range(len(high_vowels)+1) \n                           for subset in combinations(high_vowels, cardinality)}\n\npowerset_of_high_vowels\n\n{(),\n ('i',),\n ('i', 'ɪ'),\n ('i', 'ɪ', 'ʊ'),\n ('i', 'ʊ'),\n ('u',),\n ('u', 'i'),\n ('u', 'i', 'ɪ'),\n ('u', 'i', 'ɪ', 'ʊ'),\n ('u', 'i', 'ʊ'),\n ('u', 'ɪ'),\n ('u', 'ɪ', 'ʊ'),\n ('u', 'ʊ'),\n ('ɪ',),\n ('ɪ', 'ʊ'),\n ('ʊ',)}\n\n\nOne slightly weird thing about this output is that the set we get has tuples as elements. For most purposes, this result is fine, but sometimes we want the elements to themselves be sets, so we can do set operations on them easily. The issue is that, as we’ve already seen, sets can’t be elements of sets in Python. This is a case where we need frozensets.\n\npowerset_of_high_vowels = {frozenset(subset) \n                           for cardinality in range(len(high_vowels)+1) \n                           for subset in combinations(high_vowels, cardinality)}\n\npowerset_of_high_vowels\n\n{frozenset(),\n frozenset({'u', 'ʊ'}),\n frozenset({'i', 'u', 'ʊ'}),\n frozenset({'u', 'ɪ'}),\n frozenset({'i', 'ɪ'}),\n frozenset({'ɪ', 'ʊ'}),\n frozenset({'i', 'ʊ'}),\n frozenset({'ɪ'}),\n frozenset({'i'}),\n frozenset({'ʊ'}),\n frozenset({'u'}),\n frozenset({'i', 'u'}),\n frozenset({'i', 'u', 'ɪ'}),\n frozenset({'u', 'ɪ', 'ʊ'}),\n frozenset({'i', 'ɪ', 'ʊ'}),\n frozenset({'i', 'u', 'ɪ', 'ʊ'})}\n\n\nSo if we wanted to be able to take the power set of anything we can represent in python as a set, we could wrap this comprehension in a function.\n\nfrom typing import Set\n\ndef powerset(x: set) -&gt; Set[frozenset]:\n  return {\n      frozenset(subset) \n      for cardinality in range(len(x)+1) \n      for subset in combinations(x, cardinality)\n  }\n\npowerset(high_vowels)\n\n{frozenset(),\n frozenset({'u', 'ʊ'}),\n frozenset({'i', 'u', 'ʊ'}),\n frozenset({'u', 'ɪ'}),\n frozenset({'i', 'ɪ'}),\n frozenset({'ɪ', 'ʊ'}),\n frozenset({'i', 'ʊ'}),\n frozenset({'ɪ'}),\n frozenset({'i'}),\n frozenset({'ʊ'}),\n frozenset({'u'}),\n frozenset({'i', 'u'}),\n frozenset({'i', 'u', 'ɪ'}),\n frozenset({'u', 'ɪ', 'ʊ'}),\n frozenset({'i', 'ɪ', 'ʊ'}),\n frozenset({'i', 'u', 'ɪ', 'ʊ'})}\n\n\nAlternatively, we can use the following itertools recipe. The main difference here is that we don’t have the explicit for loop over subsets of a particular cardinality, which we needed for the purposes of flattening sets. That’s what itertools.chain.from_iterable does for us. This returns an itertools.chain object, which you can treat as a generator.\n\nfrom typing import Iterable\nfrom itertools import chain\n\ndef powerset(iterable: Iterable) -&gt; chain:\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n\npowerset(high_vowels)\n\n&lt;itertools.chain at 0x106193070&gt;\n\n\nTo get a set of frozensets, we need to some explicit type casting (so we don’t really avoid the second for loop…).\n\n{frozenset(subset) for subset in powerset(high_vowels)}\n\n{frozenset(),\n frozenset({'u', 'ʊ'}),\n frozenset({'i', 'u', 'ʊ'}),\n frozenset({'u', 'ɪ'}),\n frozenset({'i', 'ɪ'}),\n frozenset({'ɪ', 'ʊ'}),\n frozenset({'i', 'ʊ'}),\n frozenset({'ɪ'}),\n frozenset({'i'}),\n frozenset({'ʊ'}),\n frozenset({'u'}),\n frozenset({'i', 'u'}),\n frozenset({'i', 'u', 'ɪ'}),\n frozenset({'u', 'ɪ', 'ʊ'}),\n frozenset({'i', 'ɪ', 'ʊ'}),\n frozenset({'i', 'u', 'ɪ', 'ʊ'})}\n\n\nNote that the thing we’re taking the power set of needs to be of finite size in both implementations–i.e. it can’t be a generator that runs forever. To see this, let’s create a generator for the natural numbers using yield statements. If we create a generator by calling natural_numbers with no arguments, it would run forever. (Below I break it after 10 iterations.)\nAnd if I pass this generator (an iterable) to powerset, it will hang.\n\nfrom collections.abc import Generator\nfrom multiprocessing import Process\n\ndef natural_numbers() -&gt; int:\n    \"\"\"Initialize a generator for the natural numbers\"\"\"\n    i = 0\n    while True:\n        yield i\n        i += 1\n\n# initialize a generator of the natural numbers\nN: Generator[int] = natural_numbers()\n\n# this will hang\n# powerset(N)\n\nIf we want to be able to generate elements of the power set of an infinite set, we will have to do it in a slightly smarter way.\n\nfrom typing import TypeVar, Set, Iterable\n\nT = TypeVar(\"T\")\n\nemptyset = frozenset()\n\ndef powerset(iterable: Iterable[T]) -&gt; Set[T]:\n    yield emptyset\n\n    seen = {emptyset}\n\n    for r in iterable:\n        new = {s | frozenset({r}) for s in seen}\n        for n in new:\n            yield n\n            seen.add(n)\n\nThis will still get us the correct result for finite sets.\n\n{s for s in powerset(high_vowels)}\n\n{frozenset(),\n frozenset({'u', 'ʊ'}),\n frozenset({'i', 'u', 'ʊ'}),\n frozenset({'u', 'ɪ'}),\n frozenset({'i', 'ɪ'}),\n frozenset({'ɪ', 'ʊ'}),\n frozenset({'i', 'ʊ'}),\n frozenset({'ɪ'}),\n frozenset({'i'}),\n frozenset({'ʊ'}),\n frozenset({'u'}),\n frozenset({'i', 'u'}),\n frozenset({'i', 'u', 'ɪ'}),\n frozenset({'u', 'ɪ', 'ʊ'}),\n frozenset({'i', 'ɪ', 'ʊ'}),\n frozenset({'i', 'u', 'ɪ', 'ʊ'})}\n\n\nAnd it will also work for infinite sets.\n\nN = natural_numbers()\n\nfor i, s in enumerate(powerset(N)):\n  if i &lt; 100:\n    print(s)\n  else:\n    break\n\nfrozenset()\nfrozenset({0})\nfrozenset({0, 1})\nfrozenset({1})\nfrozenset({2})\nfrozenset({1, 2})\nfrozenset({0, 2})\nfrozenset({0, 1, 2})\nfrozenset({2, 3})\nfrozenset({0, 2, 3})\nfrozenset({0, 3})\nfrozenset({3})\nfrozenset({0, 1, 2, 3})\nfrozenset({1, 3})\nfrozenset({1, 2, 3})\nfrozenset({0, 1, 3})\nfrozenset({0, 3, 4})\nfrozenset({3, 4})\nfrozenset({0, 1, 4})\nfrozenset({2, 3, 4})\nfrozenset({1, 4})\nfrozenset({1, 2, 4})\nfrozenset({0, 1, 2, 3, 4})\nfrozenset({0, 2, 3, 4})\nfrozenset({0, 4})\nfrozenset({2, 4})\nfrozenset({0, 2, 4})\nfrozenset({1, 2, 3, 4})\nfrozenset({0, 1, 3, 4})\nfrozenset({0, 1, 2, 4})\nfrozenset({1, 3, 4})\nfrozenset({4})\nfrozenset({1, 3, 5})\nfrozenset({4, 5})\nfrozenset({0, 2, 5})\nfrozenset({0, 5})\nfrozenset({0, 3, 4, 5})\nfrozenset({0, 1, 3, 4, 5})\nfrozenset({0, 3, 5})\nfrozenset({0, 4, 5})\nfrozenset({0, 2, 3, 4, 5})\nfrozenset({0, 2, 3, 5})\nfrozenset({1, 2, 3, 4, 5})\nfrozenset({2, 3, 5})\nfrozenset({3, 5})\nfrozenset({3, 4, 5})\nfrozenset({1, 2, 4, 5})\nfrozenset({0, 1, 2, 4, 5})\nfrozenset({0, 1, 4, 5})\nfrozenset({0, 2, 4, 5})\nfrozenset({0, 1, 3, 5})\nfrozenset({2, 3, 4, 5})\nfrozenset({1, 2, 5})\nfrozenset({1, 5})\nfrozenset({1, 4, 5})\nfrozenset({5})\nfrozenset({0, 1, 2, 5})\nfrozenset({1, 3, 4, 5})\nfrozenset({1, 2, 3, 5})\nfrozenset({0, 1, 2, 3, 4, 5})\nfrozenset({2, 4, 5})\nfrozenset({2, 5})\nfrozenset({0, 1, 5})\nfrozenset({0, 1, 2, 3, 5})\nfrozenset({1, 4, 5, 6})\nfrozenset({4, 6})\nfrozenset({2, 3, 5, 6})\nfrozenset({2, 6})\nfrozenset({0, 1, 2, 4, 5, 6})\nfrozenset({0, 2, 4, 6})\nfrozenset({0, 1, 4, 5, 6})\nfrozenset({0, 5, 6})\nfrozenset({0, 2, 3, 6})\nfrozenset({0, 1, 2, 5, 6})\nfrozenset({1, 2, 3, 4, 5, 6})\nfrozenset({0, 3, 4, 6})\nfrozenset({0, 1, 3, 4, 5, 6})\nfrozenset({2, 3, 4, 6})\nfrozenset({4, 5, 6})\nfrozenset({0, 2, 3, 4, 5, 6})\nfrozenset({1, 3, 4, 6})\nfrozenset({1, 2, 3, 4, 6})\nfrozenset({1, 4, 6})\nfrozenset({0, 1, 2, 3, 4, 6})\nfrozenset({2, 4, 6})\nfrozenset({3, 4, 5, 6})\nfrozenset({0, 4, 6})\nfrozenset({1, 3, 4, 5, 6})\nfrozenset({0, 6})\nfrozenset({0, 3, 5, 6})\nfrozenset({0, 2, 6})\nfrozenset({0, 1, 2, 4, 6})\nfrozenset({0, 2, 5, 6})\nfrozenset({0, 3, 6})\nfrozenset({0, 4, 5, 6})\nfrozenset({0, 2, 4, 5, 6})\nfrozenset({3, 4, 6})\nfrozenset({5, 6})\nfrozenset({1, 2, 4, 5, 6})\nfrozenset({2, 4, 5, 6})"
  },
  {
    "objectID": "formal-and-practical-preliminaries/elementary-mathematical-concepts/products.html",
    "href": "formal-and-practical-preliminaries/elementary-mathematical-concepts/products.html",
    "title": "Products",
    "section": "",
    "text": "The cartesian product of a set \\(A\\) with a set \\(B\\) is the set of all pairs of some element in \\(A\\) with some element in \\(B\\) (in that order).\n\\[A \\times B = \\{\\langle x, y \\rangle\\;|\\;x \\in A \\land y \\in B\\}\\]\nThe caridinality of a cartesian product of two sets is the product of their cardinalities.\n\\[|A \\times B| = |A| \\times |B|\\]\n\nfrom itertools import product\n\nx = {1, 2, 3}\ny = {\"d\", \"u\", \"r\"}\n\n# cartesian product using nested for loop\n# in set comprehension\nz = {(i, j) for i in x for j in y}\nset(product(x, y)) == z # evaluates to True\n\nTrue\n\n\nThe cartesian product can be iterated – notated using exponentiation notation\n\\[A^3 = A \\times (A \\times A)\\] \\[A^4 = A \\times (A \\times (A \\times A))\\]\nSince we know \\(|A \\times B|\\), we also know the cardinality of \\(|A^N| = |\\times_{i=1}^N A| = |A| \\times |A^{N-1}| = |A|^N\\).\n\nvowels: set[str] = {\"e\", \"i\", \"o\", \"u\", \"æ\", \"ɑ\", \"ɔ\", \"ə\", \"ɛ\", \"ɪ\", \"ʊ\"}\n\ndef exponentiate(a, n):\n    if n == 1:\n        return a\n    else:\n        return {(x, t) for t in exponentiate(a, n-1) for x in a}\n        \n    \nexponentiate(vowels, 5)\n\n{('u', ('æ', ('o', ('u', 'i')))),\n ('ɪ', ('ɑ', ('ɑ', ('ə', 'ɛ')))),\n ('ɪ', ('ʊ', ('u', ('o', 'ɛ')))),\n ('ʊ', ('æ', ('æ', ('i', 'ɔ')))),\n ('ə', ('ʊ', ('e', ('ɑ', 'æ')))),\n ('ɑ', ('o', ('ɪ', ('ɔ', 'u')))),\n ('ɔ', ('ɛ', ('æ', ('e', 'ɪ')))),\n ('æ', ('ə', ('ɑ', ('u', 'u')))),\n ('u', ('æ', ('ɪ', ('æ', 'ʊ')))),\n ('i', ('ʊ', ('ɔ', ('u', 'ʊ')))),\n ('ɔ', ('ʊ', ('ɔ', ('ə', 'u')))),\n ('e', ('ɑ', ('u', ('ɑ', 'o')))),\n ('ɪ', ('ɔ', ('e', ('i', 'æ')))),\n ('ɔ', ('æ', ('ɑ', ('ə', 'ɔ')))),\n ('ɪ', ('u', ('ə', ('o', 'i')))),\n ('o', ('ʊ', ('ə', ('æ', 'ə')))),\n ('u', ('æ', ('æ', ('ɪ', 'u')))),\n ('e', ('o', ('u', ('e', 'o')))),\n ('ɔ', ('æ', ('æ', ('ɔ', 'ɔ')))),\n ('ʊ', ('ə', ('ʊ', ('ʊ', 'æ')))),\n ('ɔ', ('ɔ', ('u', ('i', 'e')))),\n ('ɛ', ('ɪ', ('i', ('æ', 'ʊ')))),\n ('ə', ('ʊ', ('ɔ', ('ə', 'i')))),\n ('ɪ', ('u', ('o', ('ɛ', 'o')))),\n ('ɑ', ('o', ('ɛ', ('æ', 'ɪ')))),\n ('i', ('ɛ', ('ɪ', ('i', 'ɛ')))),\n ('ə', ('ɔ', ('u', ('ɔ', 'ə')))),\n ('ɪ', ('i', ('ɛ', ('ʊ', 'æ')))),\n ('o', ('u', ('ʊ', ('ʊ', 'ɛ')))),\n ('ɑ', ('i', ('o', ('ɑ', 'ʊ')))),\n ('i', ('ʊ', ('ɛ', ('o', 'o')))),\n ('ɑ', ('ə', ('æ', ('i', 'ɪ')))),\n ('e', ('ʊ', ('ə', ('ɛ', 'ɑ')))),\n ('ʊ', ('ə', ('ɔ', ('ɔ', 'i')))),\n ('e', ('e', ('ə', ('ɪ', 'u')))),\n ('o', ('ʊ', ('e', ('e', 'ɛ')))),\n ('ɛ', ('ʊ', ('ɑ', ('ɛ', 'ə')))),\n ('o', ('e', ('ʊ', ('ɔ', 'ə')))),\n ('ɔ', ('e', ('o', ('ɔ', 'æ')))),\n ('ʊ', ('ə', ('ɛ', ('æ', 'o')))),\n ('ɪ', ('i', ('ɛ', ('ɔ', 'u')))),\n ('i', ('u', ('i', ('æ', 'u')))),\n ('u', ('ʊ', ('ɑ', ('e', 'ɑ')))),\n ('æ', ('e', ('ʊ', ('ə', 'o')))),\n ('ɔ', ('o', ('o', ('o', 'ʊ')))),\n ('ɑ', ('u', ('ɑ', ('i', 'ɛ')))),\n ('o', ('ɪ', ('ə', ('e', 'ɑ')))),\n ('ʊ', ('ə', ('e', ('ɑ', 'o')))),\n ('æ', ('i', ('ɔ', ('ɔ', 'o')))),\n ('o', ('æ', ('o', ('ɑ', 'ɛ')))),\n ('ʊ', ('ɔ', ('u', ('ɑ', 'ɑ')))),\n ('æ', ('æ', ('ɪ', ('ʊ', 'ʊ')))),\n ('ə', ('o', ('ʊ', ('æ', 'ə')))),\n ('ɪ', ('u', ('æ', ('ɑ', 'i')))),\n ('u', ('o', ('ɔ', ('ɪ', 'ɑ')))),\n ('ɔ', ('ɪ', ('ɛ', ('ɛ', 'ə')))),\n ('ə', ('æ', ('ɛ', ('ɑ', 'ʊ')))),\n ('u', ('ɑ', ('ɑ', ('u', 'e')))),\n ('ɔ', ('ɔ', ('æ', ('i', 'ɛ')))),\n ('ə', ('i', ('ɛ', ('ʊ', 'u')))),\n ('ɛ', ('æ', ('ɑ', ('o', 'ə')))),\n ('æ', ('ɑ', ('e', ('ʊ', 'æ')))),\n ('i', ('ʊ', ('ə', ('e', 'ɪ')))),\n ('u', ('o', ('ɛ', ('ɔ', 'ə')))),\n ('ɛ', ('æ', ('æ', ('æ', 'æ')))),\n ('æ', ('o', ('e', ('æ', 'ɑ')))),\n ('u', ('ɑ', ('o', ('ʊ', 'ə')))),\n ('æ', ('ʊ', ('o', ('i', 'ɛ')))),\n ('e', ('e', ('i', ('ɑ', 'æ')))),\n ('ʊ', ('ʊ', ('ə', ('u', 'æ')))),\n ('ɑ', ('ɑ', ('i', ('ə', 'ɛ')))),\n ('ɪ', ('o', ('ʊ', ('ɪ', 'i')))),\n ('o', ('e', ('ʊ', ('ɪ', 'i')))),\n ('u', ('o', ('ɑ', ('ɔ', 'ɑ')))),\n ('ə', ('ɪ', ('i', ('ɑ', 'u')))),\n ('e', ('ɪ', ('ə', ('ɔ', 'ɪ')))),\n ('ə', ('ɔ', ('ʊ', ('o', 'ɪ')))),\n ('o', ('ə', ('ɑ', ('u', 'ɛ')))),\n ('e', ('i', ('e', ('ɔ', 'i')))),\n ('ɛ', ('ɪ', ('ɔ', ('ɛ', 'ʊ')))),\n ('o', ('æ', ('e', ('o', 'ɑ')))),\n ('ɛ', ('i', ('ə', ('ɛ', 'i')))),\n ('i', ('ɑ', ('æ', ('ɑ', 'æ')))),\n ('ə', ('æ', ('o', ('ɛ', 'u')))),\n ('e', ('ɑ', ('ə', ('i', 'æ')))),\n ('ə', ('ɪ', ('ɔ', ('ə', 'ə')))),\n ('u', ('ə', ('o', ('æ', 'o')))),\n ('ɪ', ('ɔ', ('e', ('ɪ', 'ɪ')))),\n ('ɛ', ('ɔ', ('æ', ('ɛ', 'o')))),\n ('æ', ('e', ('ʊ', ('ə', 'ɑ')))),\n ('ɑ', ('ɔ', ('æ', ('ɔ', 'u')))),\n ('ɪ', ('e', ('o', ('ɑ', 'ə')))),\n ('ɪ', ('ɛ', ('e', ('ɑ', 'ɪ')))),\n ('ɪ', ('ɪ', ('ə', ('ɪ', 'ɛ')))),\n ('o', ('e', ('ɪ', ('i', 'ʊ')))),\n ('ɪ', ('ɑ', ('i', ('æ', 'u')))),\n ('ɔ', ('u', ('ə', ('ɔ', 'ʊ')))),\n ('ə', ('ɔ', ('ʊ', ('ʊ', 'ɛ')))),\n ('u', ('u', ('ə', ('e', 'ɛ')))),\n ('ɔ', ('i', ('ɛ', ('e', 'e')))),\n ('ʊ', ('u', ('ɑ', ('i', 'i')))),\n ('ʊ', ('e', ('ɛ', ('ə', 'ə')))),\n ('ɪ', ('ʊ', ('ɪ', ('e', 'e')))),\n ('æ', ('u', ('e', ('ʊ', 'ɔ')))),\n ('o', ('i', ('ɑ', ('o', 'ʊ')))),\n ('i', ('ʊ', ('ʊ', ('ɛ', 'ɛ')))),\n ('æ', ('ɛ', ('ə', ('i', 'e')))),\n ('o', ('e', ('ɑ', ('ə', 'i')))),\n ('ɑ', ('ɔ', ('o', ('u', 'o')))),\n ('ə', ('ɪ', ('ɑ', ('i', 'e')))),\n ('æ', ('u', ('e', ('ə', 'ɛ')))),\n ('ʊ', ('u', ('ɛ', ('ɪ', 'ɛ')))),\n ('u', ('o', ('ʊ', ('ɑ', 'i')))),\n ('ɛ', ('e', ('æ', ('i', 'æ')))),\n ('e', ('ɪ', ('ə', ('u', 'ɔ')))),\n ('ɑ', ('ʊ', ('e', ('ɪ', 'ɑ')))),\n ('u', ('ɔ', ('ɛ', ('ʊ', 'ɪ')))),\n ('e', ('i', ('u', ('ɪ', 'ɑ')))),\n ('ʊ', ('ɔ', ('i', ('ɔ', 'ə')))),\n ('ɑ', ('i', ('ɔ', ('e', 'u')))),\n ('ɑ', ('ɑ', ('e', ('ə', 'u')))),\n ('æ', ('ʊ', ('u', ('ʊ', 'o')))),\n ('ʊ', ('e', ('ʊ', ('ʊ', 'o')))),\n ('o', ('ɑ', ('o', ('ɛ', 'ə')))),\n ('o', ('o', ('ɔ', ('i', 'ɑ')))),\n ('ɔ', ('ɑ', ('ɑ', ('ə', 'u')))),\n ('ɔ', ('ɔ', ('ɪ', ('ə', 'ɛ')))),\n ('ɛ', ('ə', ('ɛ', ('ʊ', 'ɛ')))),\n ('o', ('e', ('i', ('i', 'i')))),\n ('ʊ', ('ɔ', ('ʊ', ('ə', 'e')))),\n ('o', ('ə', ('ɪ', ('ɛ', 'æ')))),\n ('ɪ', ('ɛ', ('ɑ', ('ɔ', 'i')))),\n ('i', ('o', ('ɛ', ('u', 'ə')))),\n ('e', ('ɛ', ('ɔ', ('u', 'ɪ')))),\n ('ɑ', ('æ', ('i', ('ɪ', 'ɔ')))),\n ('ʊ', ('ɪ', ('o', ('ɛ', 'e')))),\n ('u', ('ɑ', ('i', ('æ', 'i')))),\n ('ɛ', ('ɪ', ('ʊ', ('æ', 'ɔ')))),\n ('i', ('æ', ('o', ('ɪ', 'e')))),\n ('ʊ', ('u', ('o', ('ə', 'u')))),\n ('ɔ', ('i', ('ɛ', ('e', 'ʊ')))),\n ('ə', ('ɛ', ('o', ('e', 'ʊ')))),\n ('e', ('ɑ', ('ʊ', ('e', 'ə')))),\n ('ɑ', ('i', ('ɪ', ('ɔ', 'i')))),\n ('ɔ', ('æ', ('ɔ', ('o', 'ə')))),\n ('u', ('ɔ', ('æ', ('ɛ', 'i')))),\n ('u', ('ɪ', ('ə', ('e', 'u')))),\n ('e', ('ɪ', ('ə', ('ʊ', 'æ')))),\n ('æ', ('æ', ('ɪ', ('ʊ', 'u')))),\n ('ɔ', ('ʊ', ('e', ('ə', 'ɪ')))),\n ('ɑ', ('ɑ', ('ɛ', ('o', 'u')))),\n ('ə', ('æ', ('ɛ', ('ɑ', 'u')))),\n ('e', ('ʊ', ('ɔ', ('ʊ', 'u')))),\n ('ɛ', ('ɔ', ('ɛ', ('ɔ', 'ɛ')))),\n ('ɔ', ('ə', ('ɔ', ('i', 'ɑ')))),\n ('u', ('ɛ', ('æ', ('ʊ', 'ɪ')))),\n ('ɛ', ('æ', ('i', ('æ', 'ɪ')))),\n ('e', ('ʊ', ('æ', ('æ', 'ɔ')))),\n ('o', ('ɛ', ('u', ('ɪ', 'ə')))),\n ('ə', ('æ', ('u', ('ɛ', 'ɛ')))),\n ('ə', ('ɔ', ('ə', ('i', 'i')))),\n ('ɛ', ('ɔ', ('ʊ', ('e', 'ɔ')))),\n ('ə', ('o', ('ɑ', ('i', 'ɑ')))),\n ('i', ('ɪ', ('ɔ', ('ɪ', 'ɑ')))),\n ('i', ('e', ('o', ('ə', 'ə')))),\n ('ɪ', ('ə', ('ɔ', ('i', 'ɛ')))),\n ('i', ('ɛ', ('ɑ', ('ɛ', 'u')))),\n ('e', ('ʊ', ('ɑ', ('ɑ', 'ɛ')))),\n ('æ', ('ʊ', ('ə', ('æ', 'e')))),\n ('u', ('ɑ', ('e', ('ɪ', 'i')))),\n ('u', ('ɛ', ('o', ('o', 'u')))),\n ('i', ('ə', ('o', ('ɑ', 'e')))),\n ('i', ('u', ('ɔ', ('ɔ', 'ʊ')))),\n ('ɛ', ('ɔ', ('u', ('ə', 'ɪ')))),\n ('o', ('e', ('æ', ('ɪ', 'ɑ')))),\n ('ʊ', ('ɪ', ('æ', ('ɛ', 'u')))),\n ('i', ('ɪ', ('ɑ', ('ɔ', 'ɑ')))),\n ('ə', ('e', ('ɔ', ('e', 'i')))),\n ('o', ('o', ('u', ('ɪ', 'æ')))),\n ('ə', ('i', ('æ', ('æ', 'ɑ')))),\n ('u', ('ʊ', ('e', ('u', 'o')))),\n ('ɔ', ('u', ('ə', ('ɔ', 'u')))),\n ('e', ('ʊ', ('u', ('i', 'u')))),\n ('ɛ', ('æ', ('ɑ', ('ə', 'ə')))),\n ('æ', ('ɛ', ('ʊ', ('ʊ', 'æ')))),\n ('æ', ('ɑ', ('ɑ', ('ɪ', 'ɪ')))),\n ('ɪ', ('o', ('ɛ', ('ʊ', 'ɔ')))),\n ('ɛ', ('ʊ', ('e', ('ə', 'u')))),\n ('ɪ', ('ɪ', ('ɪ', ('æ', 'e')))),\n ('u', ('ɪ', ('æ', ('ɑ', 'ʊ')))),\n ('ɪ', ('o', ('ɛ', ('ə', 'ɛ')))),\n ('o', ('e', ('ɛ', ('ə', 'ɛ')))),\n ('o', ('æ', ('æ', ('æ', 'ʊ')))),\n ('æ', ('ɛ', ('ɪ', ('ɪ', 'ɔ')))),\n ('o', ('u', ('ɪ', ('ɔ', 'ə')))),\n ('ə', ('i', ('ə', ('ɛ', 'æ')))),\n ('æ', ('ɑ', ('æ', ('ɑ', 'e')))),\n ('i', ('ɑ', ('e', ('u', 'ə')))),\n ('æ', ('æ', ('æ', ('ʊ', 'ɔ')))),\n ('ɛ', ('æ', ('ɛ', ('ɪ', 'ɪ')))),\n ('ɑ', ('ə', ('ʊ', ('ɛ', 'ɔ')))),\n ('æ', ('u', ('ɪ', ('ə', 'o')))),\n ('ə', ('æ', ('ɛ', ('ɔ', 'ʊ')))),\n ('ɔ', ('i', ('e', ('æ', 'ɪ')))),\n ('ɪ', ('ʊ', ('æ', ('e', 'ɔ')))),\n ('u', ('e', ('ɪ', ('ʊ', 'e')))),\n ('ə', ('ɑ', ('ə', ('ɛ', 'ɑ')))),\n ('ɛ', ('e', ('ɔ', ('e', 'ɛ')))),\n ('u', ('æ', ('æ', ('o', 'æ')))),\n ('ɑ', ('ɑ', ('u', ('ʊ', 'ɑ')))),\n ('ɛ', ('i', ('i', ('æ', 'ɛ')))),\n ('i', ('ə', ('ɪ', ('u', 'i')))),\n ('e', ('ɔ', ('u', ('ɪ', 'æ')))),\n ('o', ('ʊ', ('ɪ', ('ɔ', 'ʊ')))),\n ('o', ('ɔ', ('ɑ', ('ɛ', 'e')))),\n ('u', ('ʊ', ('u', ('ɛ', 'o')))),\n ('i', ('æ', ('ɛ', ('ɪ', 'ʊ')))),\n ('ɪ', ('ʊ', ('ə', ('ə', 'i')))),\n ('o', ('u', ('i', ('ɪ', 'ɔ')))),\n ('ɔ', ('o', ('e', ('æ', 'u')))),\n ('ə', ('u', ('ɪ', ('e', 'o')))),\n ('u', ('u', ('ə', ('æ', 'ʊ')))),\n ('u', ('ɑ', ('æ', ('æ', 'o')))),\n ('o', ('u', ('ɪ', ('ɪ', 'i')))),\n ('æ', ('ɪ', ('o', ('u', 'ɪ')))),\n ('ʊ', ('o', ('ɑ', ('æ', 'ʊ')))),\n ('o', ('ɔ', ('u', ('ʊ', 'ʊ')))),\n ('ʊ', ('i', ('ɔ', ('i', 'u')))),\n ('æ', ('e', ('ɪ', ('u', 'ɪ')))),\n ('ʊ', ('o', ('ɛ', ('ɛ', 'ɑ')))),\n ('i', ('ɛ', ('ɛ', ('ɔ', 'ɑ')))),\n ('ʊ', ('ɑ', ('e', ('ɔ', 'æ')))),\n ('o', ('o', ('ʊ', ('e', 'i')))),\n ('ɪ', ('e', ('ʊ', ('ɪ', 'e')))),\n ('ɪ', ('ʊ', ('e', ('ɪ', 'o')))),\n ('ɔ', ('ɑ', ('o', ('ɪ', 'ʊ')))),\n ('ɪ', ('ʊ', ('e', ('u', 'ɑ')))),\n ('ɔ', ('o', ('o', ('o', 'ə')))),\n ('ɔ', ('e', ('ʊ', ('ə', 'u')))),\n ('ʊ', ('ɑ', ('ɪ', ('u', 'ɑ')))),\n ('ʊ', ('e', ('o', ('ɑ', 'æ')))),\n ('ɔ', ('ʊ', ('ʊ', ('ɔ', 'ɑ')))),\n ('o', ('ɑ', ('ɔ', ('ɔ', 'ɪ')))),\n ('æ', ('i', ('ə', ('ɔ', 'æ')))),\n ('i', ('ɛ', ('ɪ', ('ʊ', 'i')))),\n ('ʊ', ('o', ('e', ('i', 'ɪ')))),\n ('ɪ', ('o', ('ɪ', ('æ', 'ɑ')))),\n ('ɪ', ('ə', ('ɑ', ('ɑ', 'i')))),\n ('i', ('o', ('ɪ', ('e', 'e')))),\n ('ɪ', ('ɛ', ('ɛ', ('ʊ', 'e')))),\n ('ɛ', ('ʊ', ('u', ('æ', 'o')))),\n ('ə', ('i', ('ʊ', ('o', 'ʊ')))),\n ('i', ('ɔ', ('ɪ', ('o', 'ʊ')))),\n ('ʊ', ('ɔ', ('ɛ', ('æ', 'ə')))),\n ('æ', ('ɑ', ('i', ('ɔ', 'o')))),\n ('ɪ', ('ʊ', ('ɔ', ('ɛ', 'o')))),\n ('i', ('ə', ('ʊ', ('ɔ', 'ə')))),\n ('u', ('e', ('ɪ', ('ɛ', 'ʊ')))),\n ('u', ('e', ('ɛ', ('ɪ', 'e')))),\n ('ɪ', ('æ', ('ʊ', ('ɪ', 'u')))),\n ('i', ('e', ('e', ('o', 'o')))),\n ('ɪ', ('ɑ', ('e', ('ə', 'ɛ')))),\n ('ɪ', ('ʊ', ('i', ('ɑ', 'e')))),\n ('u', ('æ', ('ɪ', ('e', 'ɪ')))),\n ('u', ('o', ('o', ('ʊ', 'ɑ')))),\n ('e', ('e', ('ɔ', ('æ', 'e')))),\n ('ɪ', ('u', ('u', ('u', 'ɑ')))),\n ('ɪ', ('i', ('ʊ', ('ɛ', 'ʊ')))),\n ('ɪ', ('ɑ', ('e', ('ɛ', 'ɔ')))),\n ('u', ('ɑ', ('u', ('ɔ', 'u')))),\n ('ɑ', ('æ', ('ʊ', ('ɑ', 'ɑ')))),\n ('e', ('ɔ', ('ʊ', ('e', 'i')))),\n ('æ', ('u', ('ə', ('ʊ', 'ʊ')))),\n ('o', ('æ', ('u', ('u', 'æ')))),\n ('ʊ', ('u', ('ɪ', ('ʊ', 'o')))),\n ('o', ('ɪ', ('ɪ', ('o', 'ɔ')))),\n ('ɪ', ('ə', ('ɛ', ('ɔ', 'o')))),\n ('o', ('ɑ', ('ɔ', ('u', 'ɔ')))),\n ('u', ('o', ('ɑ', ('ʊ', 'ɪ')))),\n ('u', ('ɪ', ('æ', ('ɑ', 'u')))),\n ('o', ('ʊ', ('e', ('ɪ', 'ɪ')))),\n ('æ', ('i', ('æ', ('u', 'i')))),\n ('o', ('æ', ('æ', ('æ', 'u')))),\n ('ə', ('ɛ', ('e', ('æ', 'e')))),\n ('u', ('æ', ('ɛ', ('ɪ', 'u')))),\n ('i', ('ʊ', ('e', ('ʊ', 'ʊ')))),\n ('e', ('æ', ('ɔ', ('æ', 'u')))),\n ('e', ('ɪ', ('ʊ', ('i', 'ɑ')))),\n ('e', ('e', ('e', ('ɪ', 'ʊ')))),\n ('ə', ('ə', ('ɛ', ('ʊ', 'o')))),\n ('ə', ('ɔ', ('ɪ', ('ɪ', 'i')))),\n ('ə', ('u', ('ɔ', ('i', 'ə')))),\n ('u', ('e', ('o', ('ɔ', 'ə')))),\n ('o', ('ə', ('æ', ('i', 'e')))),\n ('ɪ', ('o', ('o', ('i', 'o')))),\n ('e', ('o', ('ɪ', ('o', 'ɔ')))),\n ('ɪ', ('o', ('ə', ('ɪ', 'o')))),\n ('æ', ('ə', ('o', ('æ', 'i')))),\n ('i', ('i', ('i', ('i', 'ɔ')))),\n ('ʊ', ('æ', ('ɪ', ('ʊ', 'æ')))),\n ('æ', ('ɔ', ('u', ('u', 'ɛ')))),\n ('i', ('u', ('ɑ', ('ɛ', 'e')))),\n ('ʊ', ('ɑ', ('e', ('ɛ', 'ɑ')))),\n ('ɪ', ('æ', ('ɔ', ('ə', 'e')))),\n ('e', ('ɔ', ('ɪ', ('ɛ', 'æ')))),\n ('ɛ', ('ʊ', ('æ', ('ɛ', 'ɑ')))),\n ('ʊ', ('i', ('ɪ', ('ə', 'ɔ')))),\n ('o', ('e', ('ə', ('ɑ', 'i')))),\n ('ɛ', ('e', ('æ', ('ɪ', 'u')))),\n ('u', ('u', ('ʊ', ('i', 'ɛ')))),\n ('e', ('o', ('o', ('æ', 'ʊ')))),\n ('i', ('ɑ', ('o', ('i', 'ɑ')))),\n ('ɛ', ('ɑ', ('ə', ('ɑ', 'ɛ')))),\n ('ʊ', ('ʊ', ('æ', ('o', 'o')))),\n ('o', ('ɛ', ('ɪ', ('i', 'ɑ')))),\n ('o', ('ə', ('e', ('ɔ', 'ɪ')))),\n ('o', ('ɑ', ('ɔ', ('ʊ', 'æ')))),\n ('ɔ', ('æ', ('ə', ('e', 'ɔ')))),\n ('ɑ', ('ɔ', ('ɪ', ('ɛ', 'i')))),\n ('ʊ', ('u', ('ɪ', ('ʊ', 'ɑ')))),\n ('o', ('o', ('o', ('ɛ', 'ɑ')))),\n ('ɛ', ('æ', ('e', ('o', 'ə')))),\n ('u', ('ɔ', ('ʊ', ('ɑ', 'o')))),\n ('ə', ('i', ('ʊ', ('e', 'ɑ')))),\n ('ə', ('ɑ', ('ɔ', ('ʊ', 'u')))),\n ('æ', ('ɑ', ('o', ('i', 'u')))),\n ('ɛ', ('o', ('ɪ', ('ɔ', 'ɔ')))),\n ('i', ('ɛ', ('ʊ', ('u', 'ə')))),\n ('i', ('ɑ', ('ɑ', ('i', 'ɪ')))),\n ('e', ('e', ('æ', ('e', 'ʊ')))),\n ('æ', ('o', ('i', ('æ', 'ɪ')))),\n ('ɪ', ('u', ('æ', ('ɔ', 'ə')))),\n ('ɔ', ('ɑ', ('o', ('ɪ', 'u')))),\n ('u', ('i', ('ʊ', ('i', 'i')))),\n ('ɔ', ('o', ('e', ('æ', 'ə')))),\n ('u', ('e', ('o', ('ɪ', 'i')))),\n ('o', ('o', ('ɑ', ('ɛ', 'ɪ')))),\n ('ʊ', ('ɔ', ('i', ('u', 'ʊ')))),\n ('ə', ('ə', ('ɛ', ('ʊ', 'ɑ')))),\n ('ɔ', ('e', ('i', ('o', 'ə')))),\n ('æ', ('ɛ', ('ə', ('i', 'ə')))),\n ('ə', ('ʊ', ('i', ('e', 'ɛ')))),\n ('o', ('ɔ', ('o', ('æ', 'ə')))),\n ('e', ('e', ('i', ('ɪ', 'ɛ')))),\n ('ɑ', ('ɑ', ('o', ('ə', 'ɛ')))),\n ('ɔ', ('æ', ('ɛ', ('u', 'i')))),\n ('ɔ', ('æ', ('o', ('ɪ', 'ə')))),\n ('ɛ', ('ɑ', ('æ', ('o', 'i')))),\n ('e', ('u', ('i', ('i', 'ɔ')))),\n ('i', ('ɔ', ('e', ('i', 'o')))),\n ('ɑ', ('e', ('i', ('ɔ', 'ə')))),\n ('o', ('æ', ('ɛ', ('i', 'u')))),\n ('e', ('ɔ', ('o', ('ɛ', 'ɑ')))),\n ('æ', ('æ', ('ʊ', ('ɪ', 'i')))),\n ('ɛ', ('ɔ', ('ɔ', ('æ', 'o')))),\n ('e', ('u', ('ɑ', ('e', 'ə')))),\n ('o', ('ɛ', ('i', ('ɔ', 'ʊ')))),\n ('ə', ('ɑ', ('u', ('i', 'u')))),\n ('ɪ', ('ʊ', ('ɛ', ('i', 'ɪ')))),\n ('ʊ', ('ɛ', ('æ', ('e', 'ɪ')))),\n ('ɛ', ('æ', ('u', ('e', 'i')))),\n ('ʊ', ('ʊ', ('ɔ', ('ə', 'u')))),\n ('e', ('ɔ', ('ɑ', ('ɛ', 'ɪ')))),\n ('e', ('ɪ', ('i', ('ʊ', 'æ')))),\n ('ɔ', ('ɪ', ('ɑ', ('ə', 'ɑ')))),\n ('i', ('ɪ', ('o', ('ʊ', 'ɑ')))),\n ('ɛ', ('ə', ('u', ('æ', 'ɛ')))),\n ('ɪ', ('ɛ', ('ɛ', ('u', 'ɪ')))),\n ('ɪ', ('æ', ('u', ('æ', 'ə')))),\n ('ɔ', ('ə', ('ɔ', ('e', 'ə')))),\n ('ə', ('ɛ', ('ɛ', ('ə', 'e')))),\n ('ɪ', ('ə', ('ʊ', ('ɑ', 'ɛ')))),\n ('ɪ', ('ə', ('ɔ', ('ɛ', 'ɛ')))),\n ('ʊ', ('æ', ('ɑ', ('ə', 'ɔ')))),\n ('ʊ', ('æ', ('æ', ('ɔ', 'ɔ')))),\n ('i', ('o', ('ə', ('ə', 'i')))),\n ('ə', ('ɪ', ('e', ('u', 'ʊ')))),\n ('ʊ', ('ɔ', ('u', ('i', 'e')))),\n ('æ', ('ɔ', ('ə', ('u', 'ɔ')))),\n ('e', ('ɪ', ('i', ('ɔ', 'u')))),\n ('ɔ', ('æ', ('æ', ('ɛ', 'ʊ')))),\n ('i', ('ɔ', ('o', ('e', 'ɪ')))),\n ('ɑ', ('e', ('i', ('ɪ', 'i')))),\n ('ɑ', ('ə', ('ɔ', ('e', 'ɑ')))),\n ('ɔ', ('ə', ('æ', ('o', 'ɪ')))),\n ('ɛ', ('æ', ('ɑ', ('u', 'ə')))),\n ('e', ('e', ('ɔ', ('ɑ', 'ɔ')))),\n ('e', ('e', ('u', ('o', 'e')))),\n ('o', ('ɑ', ('u', ('ʊ', 'ɪ')))),\n ('i', ('ɔ', ('u', ('ɔ', 'ɪ')))),\n ('u', ('ʊ', ('æ', ('u', 'æ')))),\n ('ɑ', ('ɪ', ('ɛ', ('o', 'ɑ')))),\n ('ɪ', ('u', ('ɪ', ('ɪ', 'e')))),\n ('ə', ('o', ('e', ('ɔ', 'ɔ')))),\n ('e', ('i', ('o', ('ɛ', 'ɪ')))),\n ('i', ('ə', ('e', ('e', 'o')))),\n ('ə', ('i', ('æ', ('ɛ', 'ɛ')))),\n ('o', ('æ', ('e', ('ɑ', 'ɔ')))),\n ('i', ('o', ('e', ('u', 'ɑ')))),\n ('u', ('ɑ', ('ɛ', ('æ', 'ɑ')))),\n ('e', ('o', ('o', ('æ', 'u')))),\n ('æ', ('u', ('ɪ', ('i', 'æ')))),\n ('ɑ', ('ɛ', ('ɛ', ('ɔ', 'e')))),\n ('ɔ', ('o', ('ɔ', ('ɔ', 'ɛ')))),\n ('ə', ('e', ('ɔ', ('ɑ', 'u')))),\n ('ɔ', ('ɑ', ('ɔ', ('e', 'ʊ')))),\n ('o', ('ɛ', ('ɔ', ('ə', 'ʊ')))),\n ('æ', ('ɑ', ('ɛ', ('æ', 'o')))),\n ('æ', ('ɔ', ('ə', ('ɑ', 'ɛ')))),\n ('ʊ', ('o', ('o', ('o', 'ʊ')))),\n ('ə', ('ɛ', ('æ', ('u', 'o')))),\n ('æ', ('ʊ', ('o', ('u', 'u')))),\n ('u', ('ɑ', ('e', ('ɑ', 'ɑ')))),\n ('i', ('i', ('æ', ('ɑ', 'ɛ')))),\n ('e', ('i', ('ə', ('i', 'ɛ')))),\n ('æ', ('ʊ', ('ɪ', ('ɑ', 'e')))),\n ('ʊ', ('ɪ', ('ɛ', ('ɛ', 'ə')))),\n ('æ', ('ɔ', ('ə', ('ʊ', 'æ')))),\n ('ʊ', ('ɔ', ('æ', ('i', 'ɛ')))),\n ('e', ('æ', ('u', ('o', 'u')))),\n ('ə', ('ɪ', ('u', ('ʊ', 'u')))),\n ('u', ('ɑ', ('ə', ('ɔ', 'ɛ')))),\n ('i', ('æ', ('o', ('o', 'ɛ')))),\n ('ɔ', ('ɪ', ('ɪ', ('i', 'ə')))),\n ('ɔ', ('ɔ', ('ɑ', ('ʊ', 'ɔ')))),\n ('i', ('u', ('o', ('æ', 'ə')))),\n ('ɔ', ('ə', ('e', ('e', 'e')))),\n ('ə', ('ʊ', ('u', ('ɪ', 'e')))),\n ('ɛ', ('ə', ('e', ('o', 'e')))),\n ('o', ('æ', ('ʊ', ('e', 'u')))),\n ('ɑ', ('ɑ', ('ɛ', ('ə', 'æ')))),\n ('ɑ', ('u', ('ɪ', ('ɔ', 'ɔ')))),\n ('e', ('ɑ', ('o', ('ə', 'ɑ')))),\n ('ɑ', ('ə', ('ɛ', ('e', 'i')))),\n ('u', ('ʊ', ('i', ('ə', 'i')))),\n ('ə', ('ɔ', ('ʊ', ('e', 'æ')))),\n ('ɛ', ('o', ('e', ('ʊ', 'i')))),\n ('u', ('i', ('æ', ('i', 'ɑ')))),\n ('æ', ('ʊ', ('æ', ('ə', 'o')))),\n ('ɔ', ('ə', ('u', ('o', 'o')))),\n ('ɪ', ('e', ('ʊ', ('i', 'ɔ')))),\n ('ɛ', ('æ', ('u', ('i', 'ɛ')))),\n ('i', ('ʊ', ('ɪ', ('ɔ', 'æ')))),\n ('æ', ('i', ('æ', ('ɔ', 'ɛ')))),\n ('ɔ', ('ɪ', ('ɔ', ('ɛ', 'e')))),\n ('ʊ', ('ɔ', ('ɑ', ('ɑ', 'ə')))),\n ('ɪ', ('i', ('ə', ('ɔ', 'ɔ')))),\n ('ɪ', ('æ', ('ə', ('u', 'e')))),\n ('ʊ', ('u', ('ə', ('ɔ', 'ʊ')))),\n ('ɪ', ('i', ('ʊ', ('ʊ', 'ə')))),\n ('u', ('u', ('ɛ', ('o', 'o')))),\n ('æ', ('e', ('ə', ('u', 'æ')))),\n ('ɔ', ('ʊ', ('ʊ', ('ʊ', 'ɪ')))),\n ('ɛ', ('e', ('e', ('o', 'u')))),\n ('u', ('ɪ', ('o', ('ɛ', 'ə')))),\n ('u', ('e', ('ɪ', ('ɛ', 'ə')))),\n ('æ', ('æ', ('æ', ('ɪ', 'ɑ')))),\n ('e', ('ɑ', ('ə', ('i', 'ɑ')))),\n ('ɔ', ('ɪ', ('i', ('i', 'u')))),\n ('ɑ', ('ɪ', ('ɪ', ('e', 'ʊ')))),\n ('ɛ', ('æ', ('i', ('ɔ', 'ɔ')))),\n ('ɔ', ('o', ('ɪ', ('e', 'ə')))),\n ('ə', ('i', ('ə', ('ʊ', 'ɔ')))),\n ('u', ('i', ('u', ('ɑ', 'i')))),\n ('u', ('ɔ', ('ɑ', ('e', 'e')))),\n ('æ', ('ɑ', ('ɛ', ('ɑ', 'e')))),\n ('ɪ', ('æ', ('e', ('e', 'ɔ')))),\n ('æ', ('æ', ('ɛ', ('ʊ', 'ɔ')))),\n ('ɛ', ('ɔ', ('ɪ', ('o', 'ə')))),\n ('o', ('ɛ', ('ɔ', ('æ', 'ɪ')))),\n ('ə', ('e', ('o', ('e', 'u')))),\n ('æ', ('æ', ('ɛ', ('ə', 'ɛ')))),\n ('ʊ', ('o', ('o', ('e', 'ɑ')))),\n ('ʊ', ('ɑ', ('ɑ', ('ə', 'u')))),\n ('ʊ', ('ɔ', ('ɪ', ('ə', 'ɛ')))),\n ('æ', ('æ', ('ɛ', ('ɛ', 'ɔ')))),\n ('u', ('æ', ('ɛ', ('o', 'æ')))),\n ('i', ('ɪ', ('ɛ', ('ɑ', 'ʊ')))),\n ('ɛ', ('ɑ', ('u', ('ʊ', 'e')))),\n ('e', ('ɪ', ('ʊ', ('e', 'ɛ')))),\n ('ɔ', ('i', ('u', ('ə', 'æ')))),\n ('u', ('u', ('ə', ('e', 'ɪ')))),\n ('e', ('e', ('i', ('æ', 'u')))),\n ('u', ('ɪ', ('i', ('ə', 'ə')))),\n ('æ', ('ə', ('i', ('u', 'ɑ')))),\n ('ʊ', ('o', ('ɑ', ('e', 'ɪ')))),\n ('æ', ('ɪ', ('æ', ('ɔ', 'æ')))),\n ('ʊ', ('i', ('ɛ', ('e', 'ʊ')))),\n ('ʊ', ('i', ('i', ('æ', 'ə')))),\n ('ʊ', ('æ', ('ɔ', ('o', 'ə')))),\n ('ɑ', ('æ', ('e', ('o', 'u')))),\n ('ɑ', ('e', ('ɛ', ('æ', 'ə')))),\n ('ʊ', ('ʊ', ('e', ('ə', 'ɪ')))),\n ('ɔ', ('æ', ('ɑ', ('o', 'u')))),\n ('ʊ', ('ʊ', ('i', ('ɪ', 'e')))),\n ('i', ('æ', ('e', ('æ', 'ɛ')))),\n ('ɛ', ('æ', ('ɔ', ('ə', 'ɔ')))),\n ('ʊ', ('ɪ', ('ɔ', ('o', 'ɪ')))),\n ('ɛ', ('u', ('e', ('ɔ', 'ɑ')))),\n ('ʊ', ('ə', ('ɔ', ('i', 'ɑ')))),\n ('æ', ('ɛ', ('o', ('u', 'ə')))),\n ('ə', ('ɔ', ('ɛ', ('ʊ', 'ə')))),\n ('i', ('ɪ', ('o', ('ɛ', 'u')))),\n ('o', ('i', ('æ', ('u', 'æ')))),\n ('ɛ', ('o', ('o', ('ʊ', 'ɛ')))),\n ('e', ('ɛ', ('ɪ', ('i', 'ə')))),\n ('i', ('ɑ', ('ɔ', ('ɔ', 'i')))),\n ('i', ('e', ('i', ('ɛ', 'u')))),\n ('ɑ', ('æ', ('ɑ', ('ɛ', 'æ')))),\n ('ə', ('ɛ', ('ɔ', ('i', 'ɛ')))),\n ('e', ('i', ('ɔ', ('u', 'æ')))),\n ('u', ('u', ('ʊ', ('ɛ', 'ɛ')))),\n ('ɔ', ('ɑ', ('o', ('o', 'æ')))),\n ('ɑ', ('i', ('ɑ', ('o', 'ɔ')))),\n ('e', ('æ', ('u', ('o', 'ə')))),\n ('ɪ', ('ə', ('ɑ', ('ɔ', 'ə')))),\n ('ɪ', ('ɑ', ('ə', ('ʊ', 'u')))),\n ('i', ('i', ('u', ('ɔ', 'e')))),\n ('ɛ', ('u', ('u', ('ɑ', 'æ')))),\n ('ɔ', ('ə', ('ə', ('ɑ', 'æ')))),\n ('e', ('ɑ', ('ə', ('ə', 'e')))),\n ('æ', ('æ', ('ɪ', ('æ', 'ɑ')))),\n ('ɑ', ('u', ('e', ('ʊ', 'i')))),\n ('ə', ('o', ('ɑ', ('u', 'o')))),\n ('o', ('i', ('o', ('e', 'e')))),\n ('ɪ', ('o', ('e', ('ɑ', 'e')))),\n ('ɔ', ('æ', ('u', ('ɑ', 'ɪ')))),\n ('ɑ', ('ɛ', ('e', ('ɑ', 'ɑ')))),\n ('u', ('i', ('o', ('e', 'ʊ')))),\n ('ɔ', ('u', ('ɑ', ('ʊ', 'i')))),\n ('ʊ', ('u', ('ə', ('ɔ', 'u')))),\n ('ə', ('ə', ('ɑ', ('ʊ', 'ə')))),\n ('u', ('ɛ', ('e', ('i', 'e')))),\n ('u', ('ɔ', ('æ', ('i', 'æ')))),\n ('u', ('ɛ', ('u', ('e', 'ɑ')))),\n ('ɪ', ('ɛ', ('æ', ('æ', 'ɔ')))),\n ('i', ('ɪ', ('e', ('u', 'ɛ')))),\n ('ɔ', ('o', ('i', ('æ', 'o')))),\n ('o', ('i', ('i', ('ə', 'i')))),\n ('ʊ', ('i', ('ɑ', ('ɪ', 'ɑ')))),\n ('ɛ', ('e', ('ɪ', ('e', 'ɪ')))),\n ('o', ('ɔ', ('ɪ', ('ʊ', 'u')))),\n ('ɪ', ('ɛ', ('æ', ('æ', 'ɪ')))),\n ('ɛ', ('u', ('ʊ', ('æ', 'ɛ')))),\n ('i', ('ɔ', ('ə', ('u', 'ə')))),\n ('ɪ', ('ɛ', ('ɑ', ('ɑ', 'ɛ')))),\n ('ɛ', ('æ', ('ʊ', ('i', 'ə')))),\n ('ə', ('i', ('ɔ', ('ʊ', 'e')))),\n ('i', ('i', ('ɛ', ('ɛ', 'æ')))),\n ('æ', ('ʊ', ('ɪ', ('ɔ', 'e')))),\n ('ɪ', ('æ', ('ɔ', ('ɔ', 'o')))),\n ('o', ('ə', ('u', ('o', 'ɔ')))),\n ('u', ('æ', ('u', ('ɔ', 'ɑ')))),\n ('æ', ('i', ('ɛ', ('i', 'o')))),\n ('e', ('ɛ', ('e', ('ɛ', 'i')))),\n ('ɪ', ('i', ('ɪ', ('ʊ', 'ɛ')))),\n ('i', ('ɑ', ('ɑ', ('æ', 'ʊ')))),\n ('ə', ('ɑ', ('ɛ', ('ɛ', 'e')))),\n ('ɔ', ('i', ('i', ('ɛ', 'ɪ')))),\n ('ɑ', ('ʊ', ('ɛ', ('i', 'æ')))),\n ('ɛ', ('ɑ', ('i', ('u', 'ə')))),\n ('ɑ', ('ɛ', ('ɪ', ('ɪ', 'ɑ')))),\n ('æ', ('ɔ', ('u', ('ʊ', 'e')))),\n ('ɑ', ('ʊ', ('ʊ', ('i', 'i')))),\n ('ə', ('æ', ('ɔ', ('ʊ', 'o')))),\n ('æ', ('æ', ('o', ('i', 'o')))),\n ('ɑ', ('æ', ('u', ('æ', 'e')))),\n ('ɛ', ('i', ('e', ('ɑ', 'æ')))),\n ('æ', ('æ', ('ə', ('ɪ', 'o')))),\n ('i', ('ɛ', ('i', ('ɔ', 'æ')))),\n ('ʊ', ('o', ('e', ('æ', 'u')))),\n ('æ', ('ʊ', ('u', ('æ', 'ɪ')))),\n ('u', ('ɪ', ('ɔ', ('ɔ', 'ɪ')))),\n ('ʊ', ('e', ('ʊ', ('æ', 'ɪ')))),\n ('e', ('ʊ', ('i', ('ʊ', 'e')))),\n ('ɪ', ('e', ('ɪ', ('ɪ', 'ɛ')))),\n ('ɪ', ('u', ('ɑ', ('æ', 'ɑ')))),\n ('ɪ', ('o', ('ɪ', ('u', 'u')))),\n ('ə', ('o', ('ə', ('æ', 'ə')))),\n ('ɛ', ('u', ('o', ('ɛ', 'æ')))),\n ('e', ('ʊ', ('u', ('u', 'u')))),\n ('ɪ', ('i', ('ə', ('i', 'ʊ')))),\n ('o', ('ɛ', ('u', ('o', 'ɪ')))),\n ('ʊ', ('ɑ', ('o', ('ɪ', 'ʊ')))),\n ('ɪ', ('u', ('ɪ', ('i', 'ɔ')))),\n ('ɔ', ('æ', ('i', ('e', 'ə')))),\n ('ɔ', ('ʊ', ('e', ('ɛ', 'æ')))),\n ('ɪ', ('ə', ('u', ('ɑ', 'ɔ')))),\n ('ʊ', ('e', ('ʊ', ('ə', 'u')))),\n ('o', ('ʊ', ('o', ('o', 'ɔ')))),\n ('ɛ', ('ɑ', ('u', ('u', 'ɪ')))),\n ('ɛ', ('i', ('æ', ('e', 'i')))),\n ('u', ('ɔ', ('ɪ', ('ə', 'æ')))),\n ('ʊ', ('ʊ', ('ʊ', ('ɔ', 'ɑ')))),\n ('ɑ', ('æ', ('ʊ', ('e', 'o')))),\n ('ə', ('u', ('e', ('i', 'i')))),\n ('i', ('ɔ', ('e', ('e', 'ə')))),\n ('æ', ('ʊ', ('ʊ', ('ɑ', 'ə')))),\n ('æ', ('ɔ', ('æ', ('ʊ', 'ɛ')))),\n ('ə', ('o', ('e', ('e', 'ɛ')))),\n ('ɑ', ('ɛ', ('ə', ('ə', 'o')))),\n ('ɑ', ('u', ('u', ('æ', 'ɛ')))),\n ('ə', ('e', ('e', ('ə', 'ɑ')))),\n ('u', ('ɪ', ('ɔ', ('u', 'ɔ')))),\n ('o', ('ɔ', ('u', ('ɔ', 'ɛ')))),\n ('ə', ('æ', ('ɔ', ('ʊ', 'ɑ')))),\n ('e', ('u', ('o', ('i', 'ɔ')))),\n ('ɑ', ('e', ('u', ('i', 'e')))),\n ('u', ('ɑ', ('ɔ', ('u', 'ɪ')))),\n ('ɔ', ('æ', ('u', ('e', 'ɪ')))),\n ('e', ('ʊ', ('ɑ', ('ɑ', 'i')))),\n ('ɑ', ('ɑ', ('ɪ', ('ɑ', 'ə')))),\n ('ɔ', ('u', ('ɛ', ('ʊ', 'ɛ')))),\n ('ə', ('ɛ', ('ɛ', ('ɔ', 'o')))),\n ('ʊ', ('ɔ', ('æ', ('ʊ', 'i')))),\n ('u', ('e', ('ɪ', ('e', 'u')))),\n ('ɛ', ('e', ('i', ('o', 'o')))),\n ('e', ('e', ('ɪ', ('ʊ', 'æ')))),\n ('o', ('ɪ', ('ɑ', ('o', 'o')))),\n ('ə', ('u', ('i', ('u', 'e')))),\n ('ə', ('ə', ('i', ('u', 'ɔ')))),\n ('ɪ', ('o', ('e', ('ɑ', 'i')))),\n ('ɑ', ('ə', ('ɛ', ('ɑ', 'u')))),\n ('e', ('ɔ', ('e', ('o', 'i')))),\n ('ɪ', ('ʊ', ('i', ('ɔ', 'ə')))),\n ('e', ('i', ('æ', ('o', 'u')))),\n ('i', ('ɛ', ('ɑ', ('ɪ', 'e')))),\n ('i', ('ɑ', ('ɑ', ('æ', 'u')))),\n ('o', ('e', ('ɔ', ('ɪ', 'ɛ')))),\n ('ɑ', ('i', ('ɑ', ('ə', 'i')))),\n ('o', ('ɛ', ('u', ('ɛ', 'æ')))),\n ('ə', ('ɑ', ('æ', ('o', 'ʊ')))),\n ('ɛ', ('ʊ', ('i', ('ʊ', 'ʊ')))),\n ('æ', ('ɔ', ('i', ('u', 'ə')))),\n ('ə', ('u', ('ɔ', ('o', 'e')))),\n ('e', ('o', ('ɑ', ('o', 'o')))),\n ('e', ('e', ('e', ('ɛ', 'ɔ')))),\n ('e', ('ɪ', ('ʊ', ('u', 'o')))),\n ('ɛ', ('æ', ('ɪ', ('i', 'ɛ')))),\n ('ɛ', ('ɑ', ('ə', ('ɑ', 'o')))),\n ('o', ('ɪ', ('ɔ', ('ɑ', 'ɛ')))),\n ('e', ('u', ('ʊ', ('i', 'o')))),\n ('ɑ', ('ɑ', ('ɔ', ('ɑ', 'ə')))),\n ('e', ('ʊ', ('ə', ('e', 'o')))),\n ('ə', ('ə', ('e', ('u', 'æ')))),\n ('ɑ', ('ɛ', ('ʊ', ('i', 'ʊ')))),\n ('o', ('e', ('æ', ('ʊ', 'æ')))),\n ('ʊ', ('ɑ', ('o', ('ɪ', 'u')))),\n ('ʊ', ('o', ('e', ('æ', 'ə')))),\n ('e', ('ɔ', ('æ', ('ɛ', 'e')))),\n ('ɪ', ('o', ('e', ('ɔ', 'e')))),\n ('æ', ('ə', ('ɔ', ('ɪ', 'u')))),\n ('ɑ', ('e', ('ɑ', ('ɑ', 'ə')))),\n ('u', ('ə', ('e', ('u', 'ɪ')))),\n ('æ', ('o', ('ɪ', ('ɪ', 'ʊ')))),\n ('ɪ', ('ɪ', ('ɑ', ('ə', 'ɔ')))),\n ('o', ('ɔ', ('ɔ', ('e', 'ɔ')))),\n ('ʊ', ('e', ('i', ('o', 'ə')))),\n ('ɛ', ('ʊ', ('ə', ('ɪ', 'ɑ')))),\n ('æ', ('ɔ', ('u', ('u', 'ɪ')))),\n ('æ', ('ɛ', ('i', ('ɔ', 'e')))),\n ('æ', ('ʊ', ('ɛ', ('ə', 'o')))),\n ('u', ('æ', ('ə', ('e', 'ʊ')))),\n ('ɛ', ('ɔ', ('ə', ('e', 'ɔ')))),\n ('ʊ', ('æ', ('ɛ', ('u', 'i')))),\n ('u', ('o', ('e', ('ə', 'i')))),\n ('e', ('o', ('ɔ', ('ɑ', 'ɛ')))),\n ('o', ('u', ('i', ('e', 'ɑ')))),\n ('ɪ', ('ɛ', ('o', ('ə', 'ɪ')))),\n ('e', ('e', ('ɔ', ('ɔ', 'u')))),\n ('e', ('æ', ('ʊ', ('i', 'æ')))),\n ('ə', ('ɪ', ('æ', ('æ', 'ɔ')))),\n ('e', ('ɪ', ('ʊ', ('u', 'ɑ')))),\n ('ɪ', ('o', ('ɛ', ('ʊ', 'ʊ')))),\n ('ə', ('ɪ', ('ɔ', ('ɛ', 'u')))),\n ('u', ('o', ('o', ('ə', 'u')))),\n ('e', ('ɔ', ('u', ('i', 'ə')))),\n ('ɔ', ('e', ('ɛ', ('ɛ', 'e')))),\n ('u', ('u', ('e', ('ʊ', 'ʊ')))),\n ('ɑ', ('ʊ', ('u', ('ɑ', 'i')))),\n ('e', ('e', ('æ', ('ɔ', 'ɔ')))),\n ('ɪ', ('ɔ', ('ɛ', ('u', 'ʊ')))),\n ('ə', ('ɪ', ('æ', ('æ', 'ɪ')))),\n ('e', ('ɑ', ('ʊ', ('æ', 'e')))),\n ('ə', ('ɪ', ('ɑ', ('ɑ', 'ɛ')))),\n ('ɑ', ('ɔ', ('æ', ('e', 'ə')))),\n ('e', ('ɑ', ('i', ('u', 'æ')))),\n ('æ', ('e', ('ɛ', ('ʊ', 'i')))),\n ('ɑ', ('ɪ', ('o', ('ɛ', 'ɔ')))),\n ('o', ('o', ('i', ('ɑ', 'æ')))),\n ('ʊ', ('ɪ', ('ɑ', ('ə', 'ɑ')))),\n ('ɪ', ('æ', ('i', ('u', 'u')))),\n ('ɔ', ('u', ('ʊ', ('ɪ', 'o')))),\n ('i', ('u', ('ɪ', ('ə', 'æ')))),\n ('ɛ', ('ɪ', ('ɑ', ('o', 'ʊ')))),\n ('ə', ('ɛ', ('ʊ', ('ɑ', 'ɛ')))),\n ('ə', ('ʊ', ('i', ('e', 'ɪ')))),\n ('e', ('u', ('i', ('ɔ', 'ɪ')))),\n ('ʊ', ('ə', ('ɔ', ('e', 'ə')))),\n ('ɑ', ('o', ('o', ('ɑ', 'i')))),\n ('ɪ', ('i', ('i', ('ɔ', 'ə')))),\n ('i', ('ɔ', ('e', ('ɪ', 'æ')))),\n ('ə', ('ɑ', ('æ', ('e', 'ɑ')))),\n ('ɔ', ('ɛ', ('ʊ', ('æ', 'æ')))),\n ('ɑ', ('ɑ', ('æ', ('ɛ', 'u')))),\n ('ɛ', ('e', ('e', ('ə', 'æ')))),\n ('ʊ', ('æ', ('æ', ('ɛ', 'ʊ')))),\n ('ʊ', ('ə', ('æ', ('o', 'ɪ')))),\n ('ɑ', ('ʊ', ('ɪ', ('ə', 'ɑ')))),\n ('e', ('ɑ', ('u', ('e', 'e')))),\n ('u', ('ʊ', ('ɑ', ('æ', 'o')))),\n ('o', ('i', ('i', ('u', 'i')))),\n ('æ', ('e', ('o', ('ə', 'æ')))),\n ('æ', ('u', ('ə', ('æ', 'ɑ')))),\n ('ɑ', ('i', ('ɛ', ('ə', 'ɛ')))),\n ('ɔ', ('ə', ('i', ('ɑ', 'æ')))),\n ('ʊ', ('o', ('ɔ', ('ɔ', 'ɛ')))),\n ('ɪ', ('i', ('ə', ('ʊ', 'e')))),\n ('i', ('i', ('ɪ', ('ɔ', 'e')))),\n ('o', ('æ', ('ə', ('i', 'ɔ')))),\n ('ʊ', ('ɑ', ('ɔ', ('e', 'ʊ')))),\n ('ɪ', ('e', ('o', ('æ', 'e')))),\n ('ɪ', ('ɔ', ('e', ('ɔ', 'ɑ')))),\n ('ʊ', ('ɪ', ('ʊ', ('ɪ', 'u')))),\n ('o', ('ɛ', ('ʊ', ('ɪ', 'o')))),\n ('i', ('ɑ', ('ɑ', ('æ', 'ə')))),\n ('ɑ', ('o', ('i', ('ə', 'u')))),\n ('e', ('ɛ', ('ʊ', ('ə', 'ə')))),\n ('ɛ', ('ɔ', ('ɔ', ('i', 'o')))),\n ('i', ('ʊ', ('e', ('æ', 'ɑ')))),\n ('ɪ', ('i', ('ɛ', ('æ', 'u')))),\n ('u', ('ɛ', ('ɪ', ('e', 'ɑ')))),\n ('ɔ', ('i', ('æ', ('ɑ', 'ɪ')))),\n ('ɑ', ('ɔ', ('ʊ', ('ɛ', 'ə')))),\n ('ɔ', ('ɪ', ('i', ('ɛ', 'ə')))),\n ('ə', ('ɔ', ('e', ('ʊ', 'ɑ')))),\n ('ʊ', ('ɪ', ('ɪ', ('i', 'ə')))),\n ('o', ('ɪ', ('u', ('ɛ', 'ɪ')))),\n ('ɪ', ('e', ('ə', ('ɪ', 'e')))),\n ('ɪ', ('ɔ', ('u', ('ɑ', 'æ')))),\n ('ʊ', ('ə', ('e', ('e', 'e')))),\n ('e', ('ɑ', ('o', ('æ', 'æ')))),\n ('æ', ('u', ('æ', ('i', 'e')))),\n ('ɔ', ('æ', ('ɑ', ('ə', 'æ')))),\n ('ɑ', ('ʊ', ('o', ('e', 'ʊ')))),\n ('ɑ', ('ɪ', ('ʊ', ('ɛ', 'o')))),\n ('i', ('e', ('ə', ('u', 'ʊ')))),\n ('ɪ', ('æ', ('o', ('æ', 'u')))),\n ('ɔ', ('e', ('ə', ('ə', 'u')))),\n ('o', ('ɪ', ('ɛ', ('ɪ', 'ə')))),\n ('i', ('ɪ', ('o', ('æ', 'ɔ')))),\n ('e', ('ɑ', ('ə', ('ɔ', 'o')))),\n ('ɑ', ('ə', ('ɛ', ('ɪ', 'ɔ')))),\n ('ʊ', ('ə', ('u', ('o', 'o')))),\n ('ɔ', ('æ', ('ɪ', ('æ', 'ə')))),\n ('ʊ', ('ɛ', ('ɑ', ('ɪ', 'ɛ')))),\n ('ɛ', ('u', ('u', ('ɪ', 'ɛ')))),\n ('ɔ', ('ə', ('ə', ('ɪ', 'ɛ')))),\n ('ʊ', ('ɪ', ('ɔ', ('ɛ', 'e')))),\n ('ɪ', ('ʊ', ('ə', ('ɛ', 'ɔ')))),\n ('i', ('i', ('ʊ', ('ɑ', 'ə')))),\n ('ə', ('ɪ', ('u', ('æ', 'ɑ')))),\n ('u', ('i', ('æ', ('u', 'o')))),\n ('ɪ', ('ɔ', ('ʊ', ('æ', 'ɛ')))),\n ('u', ('ə', ('u', ('ɔ', 'ɔ')))),\n ('ɪ', ('i', ('ə', ('ɛ', 'ʊ')))),\n ('ə', ('ɔ', ('ʊ', ('o', 'ɔ')))),\n ('ɪ', ('ɪ', ('ɔ', ('o', 'ə')))),\n ('o', ('u', ('æ', ('ɔ', 'ʊ')))),\n ('ɔ', ('e', ('ɑ', ('i', 'æ')))),\n ('ʊ', ('ʊ', ('ʊ', ('ʊ', 'ɪ')))),\n ('u', ('e', ('ɔ', ('ə', 'ə')))),\n ('ɛ', ('e', ('æ', ('ɔ', 'o')))),\n ('ʊ', ('ɪ', ('i', ('i', 'u')))),\n ('ɛ', ('ə', ('i', ('o', 'ɔ')))),\n ('ə', ('e', ('e', ('u', 'ɑ')))),\n ('æ', ('ɑ', ('ɔ', ('u', 'i')))),\n ('ə', ('i', ('e', ('ʊ', 'ɪ')))),\n ('ɛ', ('i', ('æ', ('ə', 'u')))),\n ('ʊ', ('o', ('ɪ', ('e', 'ə')))),\n ('ɑ', ('o', ('o', ('e', 'i')))),\n ('ɛ', ('ɛ', ('e', ('i', 'ə')))),\n ('æ', ('ɑ', ('o', ('o', 'ə')))),\n ('æ', ('ʊ', ('ʊ', ('ɪ', 'æ')))),\n ('ɪ', ('e', ('ʊ', ('ɔ', 'ɪ')))),\n ('æ', ('ə', ('æ', ('e', 'o')))),\n ('ə', ('æ', ('u', ('ə', 'o')))),\n ('ɛ', ('ɛ', ('o', ('e', 'ə')))),\n ('i', ('ʊ', ('æ', ('ɔ', 'e')))),\n ('ɛ', ('ʊ', ('ɔ', ('ɛ', 'æ')))),\n ('o', ('e', ('æ', ('e', 'u')))),\n ('ʊ', ('e', ('ɑ', ('o', 'e')))),\n ('e', ('ɪ', ('u', ('ɛ', 'e')))),\n ('u', ('ɔ', ('ɛ', ('æ', 'ɛ')))),\n ('ɔ', ('u', ('ɔ', ('ɪ', 'i')))),\n ('ɪ', ('ʊ', ('ɪ', ('ʊ', 'e')))),\n ('e', ('ɑ', ('ʊ', ('ɑ', 'ɔ')))),\n ('ʊ', ('i', ('u', ('ə', 'æ')))),\n ('i', ('o', ('i', ('ɪ', 'i')))),\n ('æ', ('u', ('ɛ', ('æ', 'ɛ')))),\n ('o', ('ɑ', ('ʊ', ('ɑ', 'æ')))),\n ('ɪ', ('ɪ', ('æ', ('i', 'ʊ')))),\n ('o', ('i', ('i', ('i', 'ʊ')))),\n ('æ', ('ɛ', ('ɔ', ('ə', 'o')))),\n ('ə', ('u', ('ɑ', ('e', 'i')))),\n ('u', ('e', ('ɛ', ('ɔ', 'ɪ')))),\n ('ɪ', ('u', ('i', ('ɑ', 'ɑ')))),\n ('u', ('o', ('ɪ', ('ʊ', 'o')))),\n ('ɪ', ('e', ('e', ('ə', 'ʊ')))),\n ('ɛ', ('i', ('e', ('ɪ', 'ɛ')))),\n ('æ', ('ə', ('ʊ', ('ɔ', 'æ')))),\n ('ə', ('ɑ', ('ʊ', ('ɑ', 'u')))),\n ('o', ('e', ('o', ('o', 'ɪ')))),\n ('æ', ('e', ('ɛ', ('e', 'o')))),\n ('ɛ', ('ɛ', ('ɛ', ('e', 'ɑ')))),\n ('ɑ', ('o', ('ɛ', ('ɔ', 'ʊ')))),\n ('ɔ', ('i', ('u', ('ə', 'ɑ')))),\n ('ʊ', ('æ', ('ɑ', ('o', 'u')))),\n ('i', ('ɛ', ('ɑ', ('i', 'ɔ')))),\n ('i', ('æ', ('ɪ', ('u', 'ɑ')))),\n ('e', ('ə', ('ɪ', ('ɔ', 'ə')))),\n ('ɪ', ('ɑ', ('æ', ('ʊ', 'ə')))),\n ('u', ('ə', ('ɑ', ('æ', 'ɛ')))),\n ('u', ('ɪ', ('e', ('o', 'o')))),\n ('ɪ', ('ɔ', ('ə', ('o', 'o')))),\n ('e', ('ɪ', ('ɔ', ('i', 'ʊ')))),\n ('æ', ('i', ('u', ('u', 'ʊ')))),\n ('o', ('o', ('ɪ', ('æ', 'e')))),\n ('o', ('o', ('ə', ('ɑ', 'ɑ')))),\n ('æ', ('ʊ', ('i', ('i', 'æ')))),\n ('ə', ('ʊ', ('ɪ', ('o', 'ʊ')))),\n ('æ', ('æ', ('ɪ', ('u', 'u')))),\n ('ə', ('æ', ('u', ('e', 'ə')))),\n ('e', ('ɛ', ('ɑ', ('ʊ', 'ɛ')))),\n ('ɑ', ('e', ('æ', ('ʊ', 'i')))),\n ('ʊ', ('ɑ', ('o', ('o', 'æ')))),\n ('ɪ', ('i', ('ɛ', ('æ', 'ə')))),\n ('ɛ', ('æ', ('ɛ', ('ɔ', 'ɑ')))),\n ('æ', ('ə', ('ɔ', ('o', 'æ')))),\n ('ɛ', ('ɛ', ('ə', ('ɪ', 'i')))),\n ('ʊ', ('ə', ('ə', ('ɑ', 'æ')))),\n ('ɑ', ('i', ('ɛ', ('i', 'e')))),\n ('ɔ', ('u', ('u', ('æ', 'ɔ')))),\n ('ɑ', ('i', ('æ', ('i', 'u')))),\n ('e', ('ə', ('i', ('ɪ', 'ɔ')))),\n ('o', ('i', ('æ', ('u', 'ɑ')))),\n ('æ', ('ɪ', ('o', ('u', 'ʊ')))),\n ('o', ('ɔ', ('ɛ', ('ɛ', 'ɔ')))),\n ('ɑ', ('ɑ', ('ɔ', ('ɪ', 'æ')))),\n ('e', ('ɛ', ('ɪ', ('ɑ', 'ɛ')))),\n ('ʊ', ('æ', ('u', ('ɑ', 'ɪ')))),\n ('ʊ', ('u', ('ɑ', ('ʊ', 'i')))),\n ('i', ('o', ('ɪ', ('ɪ', 'u')))),\n ('i', ('i', ('ɛ', ('ə', 'o')))),\n ('ɔ', ('ɛ', ('ə', ('e', 'ɛ')))),\n ('ɔ', ('ə', ('ɪ', ('æ', 'e')))),\n ('ɪ', ('ɑ', ('o', ('ɛ', 'ɪ')))),\n ('ə', ('o', ('ɛ', ('æ', 'ɪ')))),\n ('ʊ', ('o', ('i', ('æ', 'o')))),\n ('i', ('u', ('ɔ', ('æ', 'ʊ')))),\n ('e', ('ɑ', ('i', ('ɑ', 'ɑ')))),\n ('ɑ', ('ɔ', ('ə', ('i', 'ʊ')))),\n ('i', ('ɪ', ('ʊ', ('o', 'u')))),\n ('ɪ', ('ɑ', ('ə', ('æ', 'ɑ')))),\n ('e', ('u', ('e', ('ʊ', 'ə')))),\n ('o', ('ʊ', ('ɛ', ('u', 'ʊ')))),\n ('ɪ', ('e', ('e', ('ɑ', 'o')))),\n ('u', ('i', ('ɔ', ('i', 'ɛ')))),\n ('æ', ('ə', ('i', ('æ', 'ɔ')))),\n ('æ', ('ɛ', ('ʊ', ('u', 'æ')))),\n ('æ', ('ɪ', ('ɑ', ('æ', 'u')))),\n ('ɪ', ('ə', ('u', ('ɔ', 'u')))),\n ('ɪ', ('u', ('ɛ', ('e', 'ɔ')))),\n ('æ', ('ɛ', ('o', ('ɑ', 'ɔ')))),\n ('æ', ('ə', ('ʊ', ('ɛ', 'ɑ')))),\n ('e', ('i', ('ɛ', ('o', 'u')))),\n ('ɔ', ('ɪ', ('ə', ('ʊ', 'o')))),\n ('o', ('ɛ', ('u', ('ʊ', 'ɔ')))),\n ('ɪ', ('ʊ', ('o', ('ɔ', 'ə')))),\n ('ɪ', ('o', ('e', ('ɔ', 'ə')))),\n ('æ', ('ə', ('ɪ', ('æ', 'i')))),\n ('ɑ', ('ɑ', ('e', ('ɔ', 'ʊ')))),\n ('æ', ('ɔ', ('o', ('ɔ', 'u')))),\n ('i', ('u', ('ɪ', ('u', 'æ')))),\n ('æ', ('æ', ('e', ('ɑ', 'i')))),\n ('ɑ', ('u', ('o', ('i', 'ɛ')))),\n ('e', ('i', ('u', ('ɔ', 'æ')))),\n ('ɑ', ('æ', ('ɔ', ('ɑ', 'u')))),\n ('e', ('i', ('ʊ', ('o', 'i')))),\n ('ɔ', ('ɪ', ('æ', ('u', 'i')))),\n ('ə', ('o', ('e', ('ʊ', 'ə')))),\n ('o', ('ɔ', ('u', ('o', 'ʊ')))),\n ('i', ('æ', ('i', ('ɪ', 'ʊ')))),\n ('æ', ('ɛ', ('e', ('e', 'e')))),\n ('e', ('ʊ', ('ɛ', ('ʊ', 'ʊ')))),\n ('ɛ', ('ɛ', ('o', ('ɪ', 'æ')))),\n ('ə', ('ɔ', ('u', ('ɪ', 'ɔ')))),\n ('ɛ', ('ɔ', ('u', ('ʊ', 'ə')))),\n ('ə', ('e', ('æ', ('i', 'i')))),\n ('ʊ', ('æ', ('i', ('e', 'ə')))),\n ('ʊ', ('ʊ', ('e', ('ɛ', 'æ')))),\n ('e', ('ɪ', ('ɔ', ('i', 'u')))),\n ('ɪ', ('ʊ', ('o', ('ɪ', 'i')))),\n ('o', ('ʊ', ('e', ('ɔ', 'ɑ')))),\n ('o', ('o', ('ə', ('ə', 'ə')))),\n ('ɛ', ('ɔ', ('u', ('ɛ', 'ə')))),\n ('o', ('ɛ', ('ɑ', ('ɪ', 'æ')))),\n ('ə', ('ɔ', ('æ', ('ɔ', 'u')))),\n ('ɔ', ('ɪ', ('ə', ('ʊ', 'ɑ')))),\n ('æ', ('ʊ', ('ɑ', ('æ', 'i')))),\n ('æ', ('u', ('ə', ('ɛ', 'ɛ')))),\n ('i', ('u', ('e', ('ɑ', 'ɛ')))),\n ('ɛ', ('ɛ', ('ɪ', ('ɑ', 'æ')))),\n ('æ', ('æ', ('e', ('ɔ', 'e')))),\n ('u', ('u', ('ɔ', ('æ', 'u')))),\n ('ɪ', ('ɛ', ('i', ('ʊ', 'e')))),\n ('o', ('i', ('ɔ', ('e', 'æ')))),\n ('ɑ', ('o', ('ɔ', ('o', 'ɔ')))),\n ('ɪ', ('ɑ', ('ɪ', ('u', 'æ')))),\n ('ɔ', ('ɛ', ('u', ('ɪ', 'æ')))),\n ('o', ('ɑ', ('ɔ', ('ɔ', 'ɔ')))),\n ('æ', ('ɔ', ('ʊ', ('u', 'ɑ')))),\n ('ɪ', ('u', ('ɪ', ('ɔ', 'ɪ')))),\n ('ʊ', ('æ', ('u', ('e', 'ɪ')))),\n ('ɔ', ('æ', ('ɑ', ('u', 'æ')))),\n ('ɔ', ('ɑ', ('e', ('i', 'ɛ')))),\n ('ə', ('i', ('ɔ', ('e', 'u')))),\n ('i', ('ɑ', ('ɔ', ('i', 'ɑ')))),\n ('ɑ', ('ɑ', ('ɪ', ('e', 'æ')))),\n ('u', ('ɔ', ('æ', ('ə', 'e')))),\n ('æ', ('ɛ', ('e', ('e', 'ʊ')))),\n ('æ', ('i', ('o', ('ɑ', 'ə')))),\n ('ʊ', ('u', ('ɛ', ('ʊ', 'ɛ')))),\n ('o', ('ɔ', ('o', ('i', 'o')))),\n ('ɛ', ('e', ('u', ('u', 'ə')))),\n ('o', ('ɔ', ('ə', ('ɪ', 'o')))),\n ('e', ('i', ('u', ('ʊ', 'ɑ')))),\n ('ɛ', ('ɑ', ('ɪ', ('ɑ', 'i')))),\n ('æ', ('u', ('æ', ('ə', 'e')))),\n ('ə', ('u', ('ɪ', ('ʊ', 'ɪ')))),\n ('ɛ', ('ɪ', ('ɛ', ('i', 'æ')))),\n ('ɔ', ('e', ('ɛ', ('e', 'e')))),\n ('e', ('ɔ', ('o', ('e', 'o')))),\n ('ə', ('ʊ', ('o', ('e', 'ɪ')))),\n ('i', ('ʊ', ('e', ('o', 'ʊ')))),\n ('ɛ', ('ɪ', ('ʊ', ('i', 'i')))),\n ('ə', ('o', ('e', ('e', 'ɪ')))),\n ('i', ('e', ('i', ('ɪ', 'e')))),\n ('i', ('ɪ', ('ɔ', ('ʊ', 'o')))),\n ('o', ('ə', ('o', ('ɔ', 'i')))),\n ('ɔ', ('ʊ', ('ə', ('ɛ', 'ɪ')))),\n ('ɑ', ('ɑ', ('æ', ('ɔ', 'ə')))),\n ('ɔ', ('ɔ', ('e', ('ɔ', 'i')))),\n ('æ', ('ə', ('u', ('ɔ', 'i')))),\n ('u', ('ʊ', ('i', ('ɛ', 'ɔ')))),\n ('ɑ', ('æ', ('o', ('e', 'u')))),\n ('ɛ', ('ɔ', ('o', ('ɪ', 'ɑ')))),\n ('ə', ('ɛ', ('i', ('o', 'ʊ')))),\n ('ə', ('i', ('ɪ', ('ɔ', 'i')))),\n ('ɛ', ('ɔ', ('u', ('e', 'ɪ')))),\n ('ɪ', ('u', ('ɪ', ('u', 'ɔ')))),\n ('e', ('ʊ', ('i', ('e', 'u')))),\n ('i', ('ɪ', ('ʊ', ('o', 'ə')))),\n ('u', ('o', ('ɑ', ('ɛ', 'ɛ')))),\n ('i', ('i', ('ʊ', ('ɪ', 'æ')))),\n ('ɪ', ('ɪ', ('o', ('ɪ', 'ə')))),\n ('ɛ', ('i', ('æ', ('u', 'u')))),\n ('ɑ', ('ʊ', ('ɛ', ('ə', 'e')))),\n ('ə', ('i', ('ʊ', ('æ', 'o')))),\n ('u', ('ɛ', ('o', ('ɪ', 'o')))),\n ('u', ('ə', ('u', ('e', 'ɛ')))),\n ('æ', ('ɪ', ('ɑ', ('æ', 'ə')))),\n ('o', ('i', ('u', ('e', 'o')))),\n ('ɑ', ('e', ('ɑ', ('ə', 'ɛ')))),\n ('e', ('e', ('ɪ', ('ɪ', 'ɪ')))),\n ('i', ('ɑ', ('ɛ', ('i', 'i')))),\n ('e', ('ɪ', ('ɪ', ('ə', 'ɔ')))),\n ('u', ('i', ('ɛ', ('ɔ', 'o')))),\n ('e', ('ɛ', ('æ', ('u', 'i')))),\n ('u', ('ɔ', ('ɔ', ('e', 'ɪ')))),\n ('ɪ', ('ə', ('ə', ('ɪ', 'ə')))),\n ('ɛ', ('ɛ', ('i', ('i', 'o')))),\n ('ɔ', ('ɔ', ('u', ('ɪ', 'ɑ')))),\n ('e', ('ʊ', ('e', ('æ', 'æ')))),\n ('ɪ', ('ɪ', ('æ', ('æ', 'ʊ')))),\n ('æ', ('ʊ', ('ɛ', ('o', 'ɪ')))),\n ('ɔ', ('i', ('ɛ', ('ɑ', 'ɪ')))),\n ('i', ('ɔ', ('ɔ', ('æ', 'æ')))),\n ('ɑ', ('i', ('e', ('ɛ', 'o')))),\n ('e', ('ə', ('ə', ('ɪ', 'ɪ')))),\n ('i', ('ə', ('ɛ', ('e', 'e')))),\n ('i', ('ə', ('æ', ('e', 'u')))),\n ('ɔ', ('i', ('ɑ', ('ɛ', 'o')))),\n ('ɪ', ('ɔ', ('o', ('ə', 'ʊ')))),\n ('ɪ', ('ɔ', ('u', ('ɪ', 'ɛ')))),\n ('æ', ('ɔ', ('i', ('i', 'ɪ')))),\n ('ɪ', ('ɪ', ('æ', ('ɛ', 'ʊ')))),\n ('o', ('æ', ('ɪ', ('ɛ', 'ɪ')))),\n ('i', ('ʊ', ('ɑ', ('ə', 'ə')))),\n ('ə', ('i', ('e', ('ɪ', 'ɑ')))),\n ...}\n\n\nWhile exponentiation is defined in terms of the application of a bunch of binary \\(\\times\\), resulting in pairs of an element of \\(A\\) with pairs of an element of \\(A\\) with pairs of…we can always treat \\(A^N\\) as a set of \\(N\\)-tuples because we can always map elements of \\(A^N\\) to \\(N\\)-tuples.\n\\[\\mathrm{flatten}_A(a) = \\begin{cases}\\langle a \\rangle & \\text{if } a \\in A\\\\\n\\langle x\\;:\\;x \\in \\mathrm{flatten}(y) \\land y \\in a \\rangle & \\text{otherwise}\\end{cases}\\]\n\ndef flatten(t, a):\n    if t in a:\n        return (t,)\n    else:\n        return tuple(x for y in t for x in flatten(y, a))\n \n{flatten(x, vowels) for x in exponentiate(vowels, 2)}\n\n{('e', 'e'),\n ('e', 'i'),\n ('e', 'o'),\n ('e', 'u'),\n ('e', 'æ'),\n ('e', 'ɑ'),\n ('e', 'ɔ'),\n ('e', 'ə'),\n ('e', 'ɛ'),\n ('e', 'ɪ'),\n ('e', 'ʊ'),\n ('i', 'e'),\n ('i', 'i'),\n ('i', 'o'),\n ('i', 'u'),\n ('i', 'æ'),\n ('i', 'ɑ'),\n ('i', 'ɔ'),\n ('i', 'ə'),\n ('i', 'ɛ'),\n ('i', 'ɪ'),\n ('i', 'ʊ'),\n ('o', 'e'),\n ('o', 'i'),\n ('o', 'o'),\n ('o', 'u'),\n ('o', 'æ'),\n ('o', 'ɑ'),\n ('o', 'ɔ'),\n ('o', 'ə'),\n ('o', 'ɛ'),\n ('o', 'ɪ'),\n ('o', 'ʊ'),\n ('u', 'e'),\n ('u', 'i'),\n ('u', 'o'),\n ('u', 'u'),\n ('u', 'æ'),\n ('u', 'ɑ'),\n ('u', 'ɔ'),\n ('u', 'ə'),\n ('u', 'ɛ'),\n ('u', 'ɪ'),\n ('u', 'ʊ'),\n ('æ', 'e'),\n ('æ', 'i'),\n ('æ', 'o'),\n ('æ', 'u'),\n ('æ', 'æ'),\n ('æ', 'ɑ'),\n ('æ', 'ɔ'),\n ('æ', 'ə'),\n ('æ', 'ɛ'),\n ('æ', 'ɪ'),\n ('æ', 'ʊ'),\n ('ɑ', 'e'),\n ('ɑ', 'i'),\n ('ɑ', 'o'),\n ('ɑ', 'u'),\n ('ɑ', 'æ'),\n ('ɑ', 'ɑ'),\n ('ɑ', 'ɔ'),\n ('ɑ', 'ə'),\n ('ɑ', 'ɛ'),\n ('ɑ', 'ɪ'),\n ('ɑ', 'ʊ'),\n ('ɔ', 'e'),\n ('ɔ', 'i'),\n ('ɔ', 'o'),\n ('ɔ', 'u'),\n ('ɔ', 'æ'),\n ('ɔ', 'ɑ'),\n ('ɔ', 'ɔ'),\n ('ɔ', 'ə'),\n ('ɔ', 'ɛ'),\n ('ɔ', 'ɪ'),\n ('ɔ', 'ʊ'),\n ('ə', 'e'),\n ('ə', 'i'),\n ('ə', 'o'),\n ('ə', 'u'),\n ('ə', 'æ'),\n ('ə', 'ɑ'),\n ('ə', 'ɔ'),\n ('ə', 'ə'),\n ('ə', 'ɛ'),\n ('ə', 'ɪ'),\n ('ə', 'ʊ'),\n ('ɛ', 'e'),\n ('ɛ', 'i'),\n ('ɛ', 'o'),\n ('ɛ', 'u'),\n ('ɛ', 'æ'),\n ('ɛ', 'ɑ'),\n ('ɛ', 'ɔ'),\n ('ɛ', 'ə'),\n ('ɛ', 'ɛ'),\n ('ɛ', 'ɪ'),\n ('ɛ', 'ʊ'),\n ('ɪ', 'e'),\n ('ɪ', 'i'),\n ('ɪ', 'o'),\n ('ɪ', 'u'),\n ('ɪ', 'æ'),\n ('ɪ', 'ɑ'),\n ('ɪ', 'ɔ'),\n ('ɪ', 'ə'),\n ('ɪ', 'ɛ'),\n ('ɪ', 'ɪ'),\n ('ɪ', 'ʊ'),\n ('ʊ', 'e'),\n ('ʊ', 'i'),\n ('ʊ', 'o'),\n ('ʊ', 'u'),\n ('ʊ', 'æ'),\n ('ʊ', 'ɑ'),\n ('ʊ', 'ɔ'),\n ('ʊ', 'ə'),\n ('ʊ', 'ɛ'),\n ('ʊ', 'ɪ'),\n ('ʊ', 'ʊ')}\n\n\nAnd we can always map back to the element of \\(A^N\\).\n\\[\\mathrm{reconstruct}_A(a) = \\begin{cases}a & \\text{if } a \\in A\\\\\n\\langle \\mathrm{head}(a), \\mathrm{reconstruct}_A(\\mathrm{tail}(a))\\rangle & \\text{otherwise}\\end{cases}\\]\nwhere \\(\\mathrm{head}\\) returns the first element of a tuple and \\(\\mathrm{tail}\\) returns the tuple with the first element removed."
  },
  {
    "objectID": "formal-and-practical-preliminaries/elementary-mathematical-concepts/relations-and-functions.html",
    "href": "formal-and-practical-preliminaries/elementary-mathematical-concepts/relations-and-functions.html",
    "title": "Relations and Functions",
    "section": "",
    "text": "A relation \\(R\\) is a set of \\(N\\)-tuples whose elements \\(r_i\\) are drawn from sets \\(A_i\\).\nFor example, the relation between vowel height \\(H = \\{\\mathrm{high}, \\mathrm{mid}, \\mathrm{low}\\}\\) and the English vowels \\(V = \\{\\mathrm{i}, \\mathrm{u}, ...\\}\\) that have that height and can be viewed as a relation \\(R_\\text{height-of}\\).\n\nheight_of = {('high', 'i'),\n             ('high', 'ɪ'),\n             ('high', 'u'),\n             ('high', 'ʊ'),\n             ('mid', 'e'),\n             ('mid', 'ɛ'),\n             ('mid', 'o'),\n             ('mid', 'ɔ'),\n             ('mid', 'ə'),\n             ('low', 'ɑ'),\n             ('low', 'æ')}\n\nRelations are a subset of the cartesian product of two sets.\n\\[R_\\text{height-of} \\subseteq H \\times V\\]\nThe (graph of a) function \\(F \\subseteq X \\times Y\\) is a relation s.t. if \\(\\langle x, y \\rangle \\in F \\land \\langle x, z \\rangle \\in F\\), then \\(y = z\\) A function is total if \\(X = \\{x \\;|\\; \\langle x, y \\rangle \\in F\\}\\); otherwise it is partial.\nFor instance, the height-of relation \\(R_\\text{height-of}\\) is not a function, but its inverse relation \\(R_\\text{height-of}^{-1} = R_\\text{has-height}\\) is a function.\n\\[R^{-1}_\\text{height-of} = R_\\text{has-height} = \\{\\langle y, x \\rangle \\;|\\; \\langle x, y \\rangle \\in R_\\text{height-of}\\}\\]\n\nhas_height = {(y, x) for x, y in height_of}\n\nhas_height\n\n{('e', 'mid'),\n ('i', 'high'),\n ('o', 'mid'),\n ('u', 'high'),\n ('æ', 'low'),\n ('ɑ', 'low'),\n ('ɔ', 'mid'),\n ('ə', 'mid'),\n ('ɛ', 'mid'),\n ('ɪ', 'high'),\n ('ʊ', 'high')}\n\n\nWe can check that it is a function by checking that:\n\nlen({x for x, _ in has_height}) == len(has_height)\n\nTrue\n\n\n\nlen({x for x, y in height_of}) == len(height_of)\n\nFalse\n\n\nThe set \\(\\mathcal{F}_{X,Y}\\) of all functions between two nonempty sets \\(X\\) (the domain) and \\(Y\\) (the codomain) is a subset of the set \\(\\mathcal{R}_{X,Y}\\) of all relations between \\(X\\) and \\(Y\\).\n\\[\\mathcal{F}_{X,Y} \\subseteq \\mathcal{R}_{X,Y} = \\{R \\;|\\; R \\subseteq X \\times Y\\} = 2^{ X \\times Y}\\] \\[\\mathrm{dom}(F) = X\\] \\[\\mathrm{cod}(F) = Y\\]\nIt is a proper subset if \\(|Y|&gt;1\\).\nWe denote each \\(y\\) s.t. \\(\\langle x, y \\rangle \\in F\\) as \\(f(x)\\).\nThe image of \\(W \\subseteq X\\) under \\(f\\) is \\(f(W) = \\{f(x) \\;|\\; x \\in W\\}\\).\n\ndef image(w, f):\n    return {y for x, y in f if x in w}\n\nimage({'i'}, has_height)\n\n{'high'}\n\n\n\nimage({'i', 'e'}, has_height)\n\n{'high', 'mid'}\n\n\nThe preimage of \\(Z \\subseteq Y\\) under \\(f\\) is \\(f^{-1}(Z) = \\{x \\;|\\; f(x) \\in Z\\}\\).\n\ndef preimage(z, f):\n    return {x for x, y in f if y in z}\n\npreimage({'high'}, has_height)\n\n{'i', 'u', 'ɪ', 'ʊ'}\n\n\n\nheights = {h for h, _ in height_of}\n\npreimage(heights - {'low'}, has_height)\n\n{'e', 'i', 'o', 'u', 'ɔ', 'ə', 'ɛ', 'ɪ', 'ʊ'}\n\n\nThe range of \\(X\\) under \\(f\\) is the image of \\(X\\) under \\(f\\): \\(f(X)\\).\nAn important kind of function is a sequence, which is a partial function \\(S\\) from the natural numbers \\(\\mathbb{N}\\) to a set \\(\\Sigma\\).\n\\[\\mathbb{N} = \\{0, 1, 2, 3, \\ldots\\}\\] \\[\\Sigma = \\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ, ɹ, d, t}\\}\\] \\[S = \\begin{Bmatrix}\n0 & \\rightarrow & \\text{d}\\\\\n1 & \\rightarrow & \\text{u}\\\\\n2 & \\rightarrow & \\text{d}\\\\\n\\end{Bmatrix}\\]\nThis definition admits of sequences with gaps in the natural numbers.\n\\[\\begin{Bmatrix}\n0 & \\rightarrow & \\text{d}\\\\\n1 & \\rightarrow & \\text{u}\\\\\n205 & \\rightarrow & \\text{d}\\\\\n\\end{Bmatrix}\\]\nwe will generally assume that our sequences map the first \\(|S^{-1}(\\Sigma)|\\) natural numbers to \\(\\Sigma\\), because these “gappy” sequences can always be mapped to one where \\(S^{-1}(\\Sigma) = \\{0, ..., |S^{-1}(\\Sigma)|-1\\}\\). But there are cases—one discussed below—where we don’t necessarily want our sequences to start at 0.\nWe often denote the \\(i^{th}\\) element of a sequence using a subscript rather than function notation.\n\\[s_i \\equiv S(i)\\]\nFunctions can be represented as sets of pairs and therefore sequences can be too.\n\\[S = \\{\\langle 0, \\text{d} \\rangle, \\langle 1, \\text{u} \\rangle, \\langle 2, \\text{d} \\rangle\\} \\subseteq \\mathbb{N}\\times \\Sigma\\]\nWe can also represent sequences as elements of \\(\\Sigma^{|S^{-1}(\\Sigma)|}\\).\n\\[\\mathrm{func2tuple}(S, i) = \\begin{cases}\\langle S(i), \\mathrm{func2tuple}(S, i+1) \\rangle & \\text{if } i + 1 \\in S^{-1}(\\Sigma) \\\\\nS(i) & \\text{otherwise}\n           \\end{cases}\\]\nAnd as we saw, we can always flatten these elements of \\(\\Sigma^{|S^{-1}(\\Sigma)|}\\) to \\(|S^{-1}(\\Sigma)|\\)-tuples. Because of this, we (often) implement sequences in Python using lists and tuples, though we can implement them using dicts as well."
  },
  {
    "objectID": "formal-and-practical-preliminaries/elementary-mathematical-concepts/sequences.html",
    "href": "formal-and-practical-preliminaries/elementary-mathematical-concepts/sequences.html",
    "title": "Sequences",
    "section": "",
    "text": "A sequence \\(S\\) is a partial function from the natural numbers \\(\\mathbb{N}\\) to a set \\(\\Sigma\\).\n\\[\\mathbb{N} = \\{0, 1, 2, 3, \\ldots\\}\\] \\[\\Sigma = \\{\\text{e, i, o, u, æ, ɑ, ɔ, ə, ɛ, ɪ, ʊ, ɹ, d, t}\\}\\] \\[S = \\begin{Bmatrix}\n0 & \\rightarrow & \\text{d}\\\\\n1 & \\rightarrow & \\text{u}\\\\\n2 & \\rightarrow & \\text{d}\\\\\n\\end{Bmatrix}\\]\nThis definition admits of sequences with gaps in the natural numbers.\n\\[\\begin{Bmatrix}\n0 & \\rightarrow & \\text{d}\\\\\n1 & \\rightarrow & \\text{u}\\\\\n205 & \\rightarrow & \\text{d}\\\\\n\\end{Bmatrix}\\]\nWe will generally assume that our sequences map the first \\(|S^{-1}(\\Sigma)|\\) natural numbers to \\(\\Sigma\\), because these “gappy” sequences can always be mapped to one where \\(S^{-1}(\\Sigma) = \\{0, ..., |S^{-1}(\\Sigma)|-1\\}\\). But there are cases—one discussed below—where we don’t necessarily want our sequences to start at 0.\nWe often denote the \\(i^{th}\\) element of a sequence using a subscript rather than function notation.\n\\[s_i \\equiv S(i)\\]\nFunctions can be represented as sets of pairs and therefore sequences can be too.\n\\[S = \\{\\langle 0, \\text{d} \\rangle, \\langle 1, \\text{u} \\rangle, \\langle 2, \\text{d} \\rangle\\} \\subseteq \\mathbb{N}\\times \\Sigma\\]\nWe can also represent sequences as elements of \\(\\Sigma^{|S^{-1}(\\Sigma)|}\\).\n\\[\\mathrm{func2tuple}(S, i) = \\begin{cases}\\langle S(i), \\mathrm{func2tuple}(S, i+1) \\rangle & \\text{if } i + 1 \\in S^{-1}(\\Sigma) \\\\\nS(i) & \\text{otherwise}\n           \\end{cases}\\]\nAnd as we saw, we can always flatten these elements of \\(\\Sigma^{|S^{-1}(\\Sigma)|}\\) to \\(|S^{-1}(\\Sigma)|\\)-tuples. Because of this, we (often) implement sequences in Python using lists and tuples, though we can implement them using dicts as well.\n\nx = [\"d\", \"u\", \"d\"]\ny = (\"d\", \"u\", \"d\")\nz = {0: \"d\",\n     1: \"u\",\n     2: \"d\"}"
  },
  {
    "objectID": "formal-and-practical-preliminaries/elementary-mathematical-concepts/string-and-languages.html",
    "href": "formal-and-practical-preliminaries/elementary-mathematical-concepts/string-and-languages.html",
    "title": "Strings and Languages",
    "section": "",
    "text": "We build strings from some alphabet/lexicon \\(\\Sigma\\).\nStrings of length \\(N\\) are given by \\(\\Sigma^N\\) and the Kleene closure of \\(\\Sigma\\)—notated \\(\\Sigma^*\\)—gives us the set of all such sets.\n\\[\\Sigma^* \\equiv \\bigcup_{i\\in\\mathbb{N}} \\Sigma^i\\]\nHow do we deal with infinite sets like \\(\\Sigma^*\\) in Python? We use generators.\nTwo ways of building generators:\n\nyield statements in iteration\ngenerator comprehensions\n\n\nfrom itertools import product\n\ndef sigma_n(sigma: set, n: int):\n    sigma_repeated = [sigma]*n\n    return product(*sigma_repeated)\n\nsigma = [\"ɹ\", \"d\", \"u\"]\n\n[''.join(s) for s in sigma_n(sigma, 3)]\n\n['ɹɹɹ',\n 'ɹɹd',\n 'ɹɹu',\n 'ɹdɹ',\n 'ɹdd',\n 'ɹdu',\n 'ɹuɹ',\n 'ɹud',\n 'ɹuu',\n 'dɹɹ',\n 'dɹd',\n 'dɹu',\n 'ddɹ',\n 'ddd',\n 'ddu',\n 'duɹ',\n 'dud',\n 'duu',\n 'uɹɹ',\n 'uɹd',\n 'uɹu',\n 'udɹ',\n 'udd',\n 'udu',\n 'uuɹ',\n 'uud',\n 'uuu']\n\n\n\nN = natural_numbers()\n\nfor i in N:\n    if i &lt; 10:\n        print(i, len(list(sigma_n(sigma, i))))\n    else:\n        break\n\n0 1\n1 3\n2 9\n3 27\n4 81\n5 243\n6 729\n7 2187\n8 6561\n9 19683\n\n\n\nnext(N)\n\n11\n\n\n\nN = natural_numbers()\n\nsigma_star = (''.join(s) \n              for i in N \n              for s in sigma_n(sigma, i))\n\nfor s in sigma_star:\n    if len(s) &lt; 5:\n        print(s)\n    else:\n        break\n\n\nɹ\nd\nu\nɹɹ\nɹd\nɹu\ndɹ\ndd\ndu\nuɹ\nud\nuu\nɹɹɹ\nɹɹd\nɹɹu\nɹdɹ\nɹdd\nɹdu\nɹuɹ\nɹud\nɹuu\ndɹɹ\ndɹd\ndɹu\nddɹ\nddd\nddu\nduɹ\ndud\nduu\nuɹɹ\nuɹd\nuɹu\nudɹ\nudd\nudu\nuuɹ\nuud\nuuu\nɹɹɹɹ\nɹɹɹd\nɹɹɹu\nɹɹdɹ\nɹɹdd\nɹɹdu\nɹɹuɹ\nɹɹud\nɹɹuu\nɹdɹɹ\nɹdɹd\nɹdɹu\nɹddɹ\nɹddd\nɹddu\nɹduɹ\nɹdud\nɹduu\nɹuɹɹ\nɹuɹd\nɹuɹu\nɹudɹ\nɹudd\nɹudu\nɹuuɹ\nɹuud\nɹuuu\ndɹɹɹ\ndɹɹd\ndɹɹu\ndɹdɹ\ndɹdd\ndɹdu\ndɹuɹ\ndɹud\ndɹuu\nddɹɹ\nddɹd\nddɹu\ndddɹ\ndddd\ndddu\ndduɹ\nddud\ndduu\nduɹɹ\nduɹd\nduɹu\ndudɹ\ndudd\ndudu\nduuɹ\nduud\nduuu\nuɹɹɹ\nuɹɹd\nuɹɹu\nuɹdɹ\nuɹdd\nuɹdu\nuɹuɹ\nuɹud\nuɹuu\nudɹɹ\nudɹd\nudɹu\nuddɹ\nuddd\nuddu\nuduɹ\nudud\nuduu\nuuɹɹ\nuuɹd\nuuɹu\nuudɹ\nuudd\nuudu\nuuuɹ\nuuud\nuuuu\n\n\n\nnext(sigma_star)\n\n'ɹɹɹɹd'\n\n\nQuestion: How many strings are there in \\(\\Sigma^*\\) (assuming that \\(\\Sigma\\) is finite)? That is, what is \\(|\\Sigma^*| = |\\bigcup_{i\\in\\mathbb{N}} \\Sigma^i|\\)?\nIt must be at least at least as big as \\(|\\mathbb{N}|\\), since we have a nonempty set \\(\\Sigma^i\\) corresponding to each natural number \\(i\\).\nSurprisingly, \\(|\\Sigma^*|\\) turns out to be exactly as big as \\(|\\mathbb{N}|\\), which we can show by demonstrating that there is a bijection from \\(\\mathbb{N}\\) to \\(\\Sigma^*\\): for each \\(i \\in \\mathbb{N}\\) we can map \\(i\\) to a unique string in \\(\\Sigma^*\\) and for each string in \\(\\Sigma^*\\), we can map that string to a unique natural number \\(i\\). This bijection is a total function from \\(\\mathbb{N}\\) to \\(\\Sigma^*\\).\nThe trick is to notice that each \\(\\Sigma^i\\) is itself of finite cardinality. This means that we can always break off a chunk of the natural numbers to allocate for building a sequence of all strings in \\(\\Sigma^i\\). The idea is then that we can then stitch those sequences together to get a sequence of all \\(\\Sigma^*\\) that never repeats strings.\nYou can get an idea for how this works by enumerating the strings we generate from sigma_star.\n\nN = natural_numbers()\n\nsigma_star = (''.join(s) \n              for i in N \n              for s in sigma_n(sigma, i))\n\nfor j, s in enumerate(sigma_star):\n    if len(s) &lt; 5:\n        print(j, s)\n    else:\n        break\n\n0 \n1 ɹ\n2 d\n3 u\n4 ɹɹ\n5 ɹd\n6 ɹu\n7 dɹ\n8 dd\n9 du\n10 uɹ\n11 ud\n12 uu\n13 ɹɹɹ\n14 ɹɹd\n15 ɹɹu\n16 ɹdɹ\n17 ɹdd\n18 ɹdu\n19 ɹuɹ\n20 ɹud\n21 ɹuu\n22 dɹɹ\n23 dɹd\n24 dɹu\n25 ddɹ\n26 ddd\n27 ddu\n28 duɹ\n29 dud\n30 duu\n31 uɹɹ\n32 uɹd\n33 uɹu\n34 udɹ\n35 udd\n36 udu\n37 uuɹ\n38 uud\n39 uuu\n40 ɹɹɹɹ\n41 ɹɹɹd\n42 ɹɹɹu\n43 ɹɹdɹ\n44 ɹɹdd\n45 ɹɹdu\n46 ɹɹuɹ\n47 ɹɹud\n48 ɹɹuu\n49 ɹdɹɹ\n50 ɹdɹd\n51 ɹdɹu\n52 ɹddɹ\n53 ɹddd\n54 ɹddu\n55 ɹduɹ\n56 ɹdud\n57 ɹduu\n58 ɹuɹɹ\n59 ɹuɹd\n60 ɹuɹu\n61 ɹudɹ\n62 ɹudd\n63 ɹudu\n64 ɹuuɹ\n65 ɹuud\n66 ɹuuu\n67 dɹɹɹ\n68 dɹɹd\n69 dɹɹu\n70 dɹdɹ\n71 dɹdd\n72 dɹdu\n73 dɹuɹ\n74 dɹud\n75 dɹuu\n76 ddɹɹ\n77 ddɹd\n78 ddɹu\n79 dddɹ\n80 dddd\n81 dddu\n82 dduɹ\n83 ddud\n84 dduu\n85 duɹɹ\n86 duɹd\n87 duɹu\n88 dudɹ\n89 dudd\n90 dudu\n91 duuɹ\n92 duud\n93 duuu\n94 uɹɹɹ\n95 uɹɹd\n96 uɹɹu\n97 uɹdɹ\n98 uɹdd\n99 uɹdu\n100 uɹuɹ\n101 uɹud\n102 uɹuu\n103 udɹɹ\n104 udɹd\n105 udɹu\n106 uddɹ\n107 uddd\n108 uddu\n109 uduɹ\n110 udud\n111 uduu\n112 uuɹɹ\n113 uuɹd\n114 uuɹu\n115 uudɹ\n116 uudd\n117 uudu\n118 uuuɹ\n119 uuud\n120 uuuu\n\n\nMore formally, for \\(\\Sigma^i\\) with \\(i&gt;0\\), we take the natural numbers \\(N_i = \\left\\{\\sum_{j=0}^{i-1} |\\Sigma|^j, ..., [\\sum_{j=0}^i |\\Sigma|^j] - 1\\right\\}\\), and use them to construct a sequence \\(S_i\\) such that \\(S^{-1}(\\Sigma^i) = N_i\\). We can determine the order of strings in that sequence by imposing an order on \\(\\Sigma\\)—most straightforwardly, whatever order is implied by \\(S_1\\)—which is possible because \\(\\Sigma\\) is finite by assumption. We then use that to sort the elements of \\(\\Sigma^i\\) in lexicographic order. Therefore, we can sequence the entirety of \\(\\Sigma^*\\) using \\(S(j) = S_{\\iota i: j \\in N_i}(j)\\) with \\(\\iota i: j \\in N_i\\) being read the unique \\(i\\) such that \\(j\\) is in \\(N_i\\).\nQuestion: How many sets of strings are there in \\(2^{\\Sigma^*}\\)? That is, what is \\(|2^{\\Sigma^*}|\\)?\nWe call elements of \\(2^{\\Sigma^*}\\)—sets of strings on \\(\\Sigma\\)—languages. This terminology arises from the fact that, if \\(\\Sigma\\) were, say, all of the phonemes of English, at least one element of \\(2^{\\Sigma^*}\\) would be all and only the words of English (or at least one persons English idiolect). If \\(\\Sigma\\) were all English words (and assuming that grammaticality is a coherent binary concept), at least one element of \\(2^{\\Sigma^*}\\) would be all the grammatical sentences of English (or at least one persons English idiolect). Of course, many of the sets in \\(2^{\\Sigma^*}\\) won’t look anything like English or any other languages, and a big part of this class is going to be figuring out how to find subsets of \\(2^{\\Sigma^*}\\) that look like possible languages.\nBecause \\(\\{s\\} \\in 2^{\\Sigma^*}\\) for all \\(s \\in \\Sigma^*\\), we know that \\(2^{\\Sigma^*}\\) must be at least as large as \\(\\mathbb{\\Sigma}^*\\), which is the same size as \\(\\mathbb{N}\\). But unlike \\(\\mathbb{\\Sigma}^*\\) in comparison to \\(\\mathbb{N}\\), it turns out that \\(2^{\\Sigma^*}\\) is larger than either.\nThe trick to seeing this is to try to enumerate all languages in \\(2^{\\Sigma^*}\\). What we’ll do is view each language as an infinite string of 1s and 0s, where the \\(j^{th}\\) element for a language is \\(1\\) if the string is in the language and \\(0\\) otherwise. If the size of \\(2^{\\Sigma^*}\\) were the same as \\(\\Sigma^*\\) and \\(\\mathbb{N}\\), then we should be able to stack all of these infinite 1-0 (i.e. binary) sequences together into a matrix \\(\\mathbf{B}\\), where the \\(j^{th}\\) column tells us for each language \\(i\\) along the rows, whether that language contains string \\(S(j)\\). That would be an enumeration of the languages because each language would have its own row.\nNotice, though, that the language corresponding to the sequence \\(l_j = \\begin{cases}1 & \\text{if } b_{jj} = 0\\\\0 & \\text{otherwise} \\end{cases}\\) cannot be in this enumeration because it differs from every language in the enumeration by at least one string: for language \\(j\\), string \\(S(j)\\). But \\(l_j\\) is still a language: \\(\\{s_j\\;:\\;l_j = 1\\}\\), and so any enumeration of languages we attempt to build will not contain all languages. Therefore, \\(|2^{\\Sigma^*}| &gt; |\\Sigma^*| = |\\mathbb{N}|\\)."
  },
  {
    "objectID": "formal-and-practical-preliminaries/regular-expressions/index.html",
    "href": "formal-and-practical-preliminaries/regular-expressions/index.html",
    "title": "Regular Expressions",
    "section": "",
    "text": "Caution\n\n\n\nThis submodule will be available around January 29, 2024."
  },
  {
    "objectID": "formal-and-practical-preliminaries/text-normalization/index.html",
    "href": "formal-and-practical-preliminaries/text-normalization/index.html",
    "title": "Text Normalization",
    "section": "",
    "text": "Caution\n\n\n\nThis submodule will be available around February 5, 2024."
  },
  {
    "objectID": "formal-and-practical-preliminaries/working-with-annotated-corpora/index.html",
    "href": "formal-and-practical-preliminaries/working-with-annotated-corpora/index.html",
    "title": "Working with Annotated Corpora",
    "section": "",
    "text": "Caution\n\n\n\nThis submodule will be available around February 7, 2024."
  },
  {
    "objectID": "formal-and-practical-preliminaries/edit-distance-and-string-alignment/index.html",
    "href": "formal-and-practical-preliminaries/edit-distance-and-string-alignment/index.html",
    "title": "Edit Distance and String Alignment",
    "section": "",
    "text": "Caution\n\n\n\nThis submodule will be available around February 14, 2024."
  },
  {
    "objectID": "finite-state-models/index.html",
    "href": "finite-state-models/index.html",
    "title": "Overview",
    "section": "",
    "text": "Caution\n\n\n\nThis module will be available around February 21, 2024."
  },
  {
    "objectID": "context-free-models/index.html",
    "href": "context-free-models/index.html",
    "title": "Overview",
    "section": "",
    "text": "Caution\n\n\n\nThis module will be available around March 20, 2024."
  },
  {
    "objectID": "mildly-context-sensitive-models/index.html",
    "href": "mildly-context-sensitive-models/index.html",
    "title": "Overview",
    "section": "",
    "text": "Caution\n\n\n\nThis module will be available around April 15, 2024."
  }
]